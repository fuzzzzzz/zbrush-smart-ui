/*
 * SMART UI plugin for ZBrush 2020

 * MILESTONE 0.1 alpha:
 *      - [o] align on right side 
 *      - [o] align on the bottom
 *      - [o] do not trim button_link(n), just trim the title to display ( macro, geometry, view)
 *      - [o] toggle exit mode
 *      - [o] fix icon size when count is lesser than 16
 *      - [o] fix subtool list and track change on the current 
 *      - [o] zmodeler ( with custom brushes settings)
 *
 * MILESTONE 0.2 alpha:
 *      - [o] parametric actions toolbar
 *      - [o] add append mode ( to append to the current tool)
 *      - [o] increase to 42 buttons ( in progress)
 *      - [o] create a logo
 *
 * MILESTONE 0.3 alpha:
 *      - [x] Verify for Geometry Toolbar if the custom item path, point a SLIDER and add a warning as label to warn the user.
 *            so it does not deorganized the button order on the toolbar.
 *      - [x] Verify for Geometry Toolbar if the custom item path, point a SWITCH and authorize it to be defined as a noteISwitch item
 *
 *      - [x] fix missing icons  ( icon must be efficient, as we have no Tooltip with note interface )
 *              Geometry    :   Dynamesh / Zremesh / Project all / ... (what else ? )
 *                              How to get some feedback about the custom settings ?
 *              Macros      :   Forbidden ! No icon ( then remove icon and mesh from the UI ?)
 *              Primitives  :   Why not to propose a way to capture the primitives from the user setup
 *                              So it store it for next plugin Startup ?
 *              ZModeler    :   It's a good addition but it take time to make nice icons for that !
 *
 *      - [x] edit subtools Toolbar 
 *              This is not efficent as  NoteISwitches are not handy and fast way to setup subtool visibility into a linear toolbar
                would be better to extend with python/tkinter,
                or it would be that :
 *                  - draw in a loop the note interface.
 *                  - apply on the fly 
 *                  - redraw the note interface 
 *                  - etc... 
 *               This is not handy and take more time that having access directly through the palette or custom UI.
 *
 *      - [x] support horizontal columns (especially for top and bottom layout)
 *      - [x] support vertical columns
 *      - [!] support for switch ( aborted not handy ) 
 *      - [x] support for separators
 * 
 * MILESTONE 0.4 alpha:
 *      - [x] symmetry toolbar
 *              But how to Make a slider for Radial Symety which has a range of 
 *      - [x] view toolbar
 *
 *      - [!] brush settings toolbar ?!  ( no, we can't display Sliders... and switches in Note iteface are awfull)
 *      - [!] add subtools folder as new section
 *      - [!] add subtools visibility/polypaint toggle (impossible because of Switches culprit)
 *      - [!] add delete/duplicate buttons ( should be in Geometry/macros)
 *      - [!] pack button horinzontally on vertical toolbar ( pack what ?)
 *      - [!] pack button vertically on horizontal toolbar ( pack what ?)
 *
 * TODO :
 *
 *      Some bugs to fix: 
 *      - [o] fix Icon sIze usser settings.
 *      - [o] issue with button width : when top/bottom on text mode, width by default is too short
 *      - [x] fix the Arrow3d primitive  that must to toggle the align axis after the Double option as been activated

 *      Add more Toolbars :
 *      - [x] view toolbar (switches)
 *      - [x] symmetry (switches)
 *      - [x] brush settings toolbar
 */


// GLobals

// [VarDef,isMac,0]//do we have a Mac or PC
// [VarDef,Zvers,0]//ZBrush version
[VarDef,zFileUtilsPath,""]//plugin DLL path
[VarDef,zbrushLibPath,""]//plugin DLL path

[VarDef,dllVersion,0]//plugin DLL version
[VarDef,ERROR,-1]//standard error



[VarDef, result, -1]
[VarSet, DEBUG, 0]
[VarSet, DEBUGPRIMITIVE, 0]
// [VarSet, ADJUSTWIDTH, 1]
[VarDef, quote, [StrFromAsc,34]]

// define Toolbars indexes
// 0=brushes, 1=alphas, 2=geometry, 3=materials
// 4=macro 5=primitives 6=subtools 7=zmodeler
[VarSet, TOOLBAR, 0]

// define positions Indexes
//0=LEFT, 1=RIGHT, 2=TOP, 3=BOTTOM
[VarSet, POSITION, 0]

// 0= enable 1=disable
[VarSet, EXITMODE, 0]

// 0= disable 1=enable
[VarSet, APPENDMODE, 1]


[RoutineDef, CheckSystem,	
	//check ZBrush version
	[VarSet,Zvers,[ZBrushInfo,0]]
	[If,[Val,Zvers] >= 4.7,,		
		[Note,"\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
		[Exit]
	]	
	[VarSet,isMac, [ZBrushInfo,6]]	//check Mac or PC
	// Make sure we have the dll and set its path
	[If,[ZBrushInfo,16]==64,//64 bit
		[If,isMac,
			//use the path below for testing only			
			//[VarSet,zFileUtilsPath,"zgametoolsData/ZFileUtils.lib"]	
			//use the path below for installed plugins
			[VarSet, zFileUtilsPath, "ZBRUSH_ZSTARTUP/ZPlugs64/smart_ui_2020/ZFileUtils64.lib"]
            [VarSet, zbrushLibPath,	"ZBRUSH_ZSTARTUP/ZPlugs64/smart_ui_2020/zbrushlib.dll"]
			,	
			//use the path below for testing only	
			//[VarSet,zFileUtilsPath,"zgametoolsData\ZFileUtils64.dll"]
			//use the path below for installed plugins
			[VarSet, zFileUtilsPath, "ZBRUSH_ZSTARTUP/ZPlugs64/smart_ui_2020/ZFileUtils64.dll"]
            [VarSet, zbrushLibPath,	"ZBRUSH_ZSTARTUP/ZPlugs64/smart_ui_2020/zbrushlib.dll"]
		]
	,//else 32 bit - no longer supported
		[Note,"\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
		[Exit]
	]
	[If, [FileExists, [Var,zFileUtilsPath]],
		//check that correct version
		[VarSet, dllVersion, [FileExecute, [Var,zFileUtilsPath], Version]]
		[If, [Val,dllVersion] >= 4.7,//dll version
			//OK
			,//else earlier version			
			[Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 dll-template plugin \CffffffDLL\Cc0c0c0 is an earlier version which does not support this plugin.  Please install correct version."]
			[Exit]
		]			
	, // else no DLL.
		[Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 dll-template plugin \CffffffDLL\Cc0c0c0 could not be found at the correct location.  Please re-install the plugin, making sure the relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
		[Exit]
	]
    // check the zbrushlib dll.
    [If, [FileExists, [Var,zbrushLibPath]],
		//check that correct version
		[VarSet, dllVersion, [FileExecute, [Var,zbrushLibPath], Version]]
		[If, [Val,dllVersion] >= 1.0,//dll version
			//OK
			,//else earlier version			
			[Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 zbrushlib library \CffffffDLL\Cc0c0c0 is an earlier version which does not support this plugin.  Please install correct version."]
			[Exit]
		]			
	, // else no DLL.
		[Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 zbrushlib library \CffffffDLL\Cc0c0c0 could not be found at the correct location.  Please re-install the plugin, making sure the relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
		[Exit]
	]
]//end routine



/*
 *  Switch startup
 */
[If,[MemGetSize,nk_sui_uiSwitchesState],,
 
    [If, [FileExists,"smart_ui_2020/data/uistates.zvr"],
        [MemCreateFromFile,nk_sui_uiSwitchesState, "smart_ui_2020/data/uistates.zvr",]
		,//else
        [MVarDef,nk_sui_uiSwitchesState,83,0]
       
        // Define Default Switches Settings :		
        [MVarSet,nk_sui_uiSwitchesState,0,12] // brush:item count
        [MVarSet,nk_sui_uiSwitchesState,1,1] // brush:left
        [MVarSet,nk_sui_uiSwitchesState,2,0] // brush:right
        [MVarSet,nk_sui_uiSwitchesState,3,0] // brush:top
        [MVarSet,nk_sui_uiSwitchesState,4,0] // brush:bottom
        [MVarSet,nk_sui_uiSwitchesState,5,1] // brush:icon
        [MVarSet,nk_sui_uiSwitchesState,6,0] // brush:text
		
        [MVarSet,nk_sui_uiSwitchesState,7,12] // alpha:item count
		[MVarSet,nk_sui_uiSwitchesState,8,1] // alpha:left
        [MVarSet,nk_sui_uiSwitchesState,9,0] // alpha:right
        [MVarSet,nk_sui_uiSwitchesState,10,0] // alpha:top
        [MVarSet,nk_sui_uiSwitchesState,11,0] // alpha:bottom
        [MVarSet,nk_sui_uiSwitchesState,12,1] // alpha:icon
        [MVarSet,nk_sui_uiSwitchesState,13,0] // alpha:text
		
        [MVarSet,nk_sui_uiSwitchesState,14,12] // geo:item count
        [MVarSet,nk_sui_uiSwitchesState,15,1]  // geo:left
        [MVarSet,nk_sui_uiSwitchesState,16,0]  // geo:right
        [MVarSet,nk_sui_uiSwitchesState,17,0] // geo:top
        [MVarSet,nk_sui_uiSwitchesState,18,0] // geo:bottom
        [MVarSet,nk_sui_uiSwitchesState,19,0] // geo:icon
        [MVarSet,nk_sui_uiSwitchesState,20,1] // geo:text
		
        [MVarSet,nk_sui_uiSwitchesState,21,12] // material:item count
        [MVarSet,nk_sui_uiSwitchesState,22,1] // material:left
        [MVarSet,nk_sui_uiSwitchesState,23,0] // material:right
        [MVarSet,nk_sui_uiSwitchesState,24,0] // material:top
        [MVarSet,nk_sui_uiSwitchesState,25,0] // material:bottom
        [MVarSet,nk_sui_uiSwitchesState,26,1] // material:icon
        [MVarSet,nk_sui_uiSwitchesState,27,0] // material:text

        [MVarSet,nk_sui_uiSwitchesState,28,12] // macro:item count
        [MVarSet,nk_sui_uiSwitchesState,29,1] // macro:left
        [MVarSet,nk_sui_uiSwitchesState,30,0] // macro:right
        [MVarSet,nk_sui_uiSwitchesState,31,0] // macro:top
        [MVarSet,nk_sui_uiSwitchesState,32,0] // macro:bottom
        [MVarSet,nk_sui_uiSwitchesState,33,0] // macro:icon
        [MVarSet,nk_sui_uiSwitchesState,34,1] // macro:text

        [MVarSet,nk_sui_uiSwitchesState,35,12] // primitive:item count
        [MVarSet,nk_sui_uiSwitchesState,36,1] // primitive:left
        [MVarSet,nk_sui_uiSwitchesState,37,0] // primitive:right
        [MVarSet,nk_sui_uiSwitchesState,38,0] // primitive:top
        [MVarSet,nk_sui_uiSwitchesState,39,0] // primitive:bottom
        [MVarSet,nk_sui_uiSwitchesState,40,0] // primitive:icon
        [MVarSet,nk_sui_uiSwitchesState,41,1] // primitive:text

        [MVarSet,nk_sui_uiSwitchesState,42,0] // subtools:left
        [MVarSet,nk_sui_uiSwitchesState,43,1] // subtools:right
        [MVarSet,nk_sui_uiSwitchesState,44,0] // subtools:top
        [MVarSet,nk_sui_uiSwitchesState,45,0] // subtools:bottom
        [MVarSet,nk_sui_uiSwitchesState,46,0] // subtools:icon
        [MVarSet,nk_sui_uiSwitchesState,47,1] // subtools:text

        [MVarSet,nk_sui_uiSwitchesState,48,12] // display:item count
        [MVarSet,nk_sui_uiSwitchesState,49,1] // display:left
        [MVarSet,nk_sui_uiSwitchesState,50,0] // display:right
        [MVarSet,nk_sui_uiSwitchesState,51,0] // display:top
        [MVarSet,nk_sui_uiSwitchesState,52,0] // display:bottom
        [MVarSet,nk_sui_uiSwitchesState,53,0] // display:icon
        [MVarSet,nk_sui_uiSwitchesState,54,1] // display:text

        [MVarSet,nk_sui_uiSwitchesState,55,1] // global:button opacity
        [MVarSet,nk_sui_uiSwitchesState,56,1] // global:image opacity
        [MVarSet,nk_sui_uiSwitchesState,57,1] // global:text opacity
        [MVarSet,nk_sui_uiSwitchesState,58,50] // global:icon size
        [MVarSet,nk_sui_uiSwitchesState,59,2] // global:button margin
        [MVarSet,nk_sui_uiSwitchesState,60,24] // global:button height

        [MVarSet,nk_sui_uiSwitchesState,61,0] // global:adjust button width
        [MVarSet,nk_sui_uiSwitchesState,62,1] // global:disable quick exit

        [MVarSet,nk_sui_uiSwitchesState,63,12] // display:item count
        [MVarSet,nk_sui_uiSwitchesState,64,1] // display:left
        [MVarSet,nk_sui_uiSwitchesState,65,0] // display:right
        [MVarSet,nk_sui_uiSwitchesState,66,0] // display:top
        [MVarSet,nk_sui_uiSwitchesState,67,0] // display:bottom
        [MVarSet,nk_sui_uiSwitchesState,68,0] // display:icon
        [MVarSet,nk_sui_uiSwitchesState,69,1] // display:text

        [MVarSet,nk_sui_uiSwitchesState,70,0] // brushes:a.button opacity
        [MVarSet,nk_sui_uiSwitchesState,71,0] // alphas:b.button opacity
        [MVarSet,nk_sui_uiSwitchesState,72,0] // materials:d.button opacity

	]	
]

[RoutineDef,UIStateToFile,
    //Store Memory to File
    [MemSaveToFile,nk_sui_uiSwitchesState, "smart_ui_2020/data/uistates.zvr",1]
]

[RoutineDef,Startup,
    [VarDef,winID,0]
    [VarDef,idx,100]
    [IFreeze,
        [If,[IExists,"Zplugin:Smart UI:About:Smart UI Logo"],
            [VarSet,winID,[IGet,"Preferences:Utilities:View Window Id"]]
            
			[Loop,1,
                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Items Count"],[VarSet,idx,0][LoopExit]]
				[If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Left"],[VarSet,idx,1][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Right"],[VarSet,idx,2][LoopExit]]
				[If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Top"],[VarSet,idx,3][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Bottom"],[VarSet,idx,4][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Icon"],[VarSet,idx,5][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.Text"],[VarSet,idx,6][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Items Count"],[VarSet,idx,7][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Left"],[VarSet,idx,8][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Right"],[VarSet,idx,9][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Top"],[VarSet,idx,10][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Bottom"],[VarSet,idx,11][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Icon"],[VarSet,idx,12][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.Text"],[VarSet,idx,13][LoopExit]]
                
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Items Count"],[VarSet,idx,14][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Left"],[VarSet,idx,15][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Right"],[VarSet,idx,16][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Top"],[VarSet,idx,17][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Bottom"],[VarSet,idx,18][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Icon"],[VarSet,idx,19][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Geometry Options:c.Text"],[VarSet,idx,20][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Items Count"],[VarSet,idx,21][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Left"],[VarSet,idx,22][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Right"],[VarSet,idx,23][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Top"],[VarSet,idx,24][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Bottom"],[VarSet,idx,25][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Icon"],[VarSet,idx,26][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.Text"],[VarSet,idx,27][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Items Count"],[VarSet,idx,28][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Left"],[VarSet,idx,29][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Right"],[VarSet,idx,30][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Top"],[VarSet,idx,31][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Bottom"],[VarSet,idx,32][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Icon"],[VarSet,idx,33][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Macros Options:e.Text"],[VarSet,idx,34][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Items Count"],[VarSet,idx,35][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Left"],[VarSet,idx,36][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Right"],[VarSet,idx,37][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Top"],[VarSet,idx,38][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Bottom"],[VarSet,idx,39][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Icon"],[VarSet,idx,40][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Primitives Options:f.Text"],[VarSet,idx,41][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Left"],[VarSet,idx,42][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Right"],[VarSet,idx,43][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Top"],[VarSet,idx,44][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Bottom"],[VarSet,idx,45][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Icon"],[VarSet,idx,46][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Subtools Options:g.Text"],[VarSet,idx,47][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Items Count"],[VarSet,idx,48][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Left"],[VarSet,idx,49][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Right"],[VarSet,idx,50][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Top"],[VarSet,idx,51][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Bottom"],[VarSet,idx,52][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Icon"],[VarSet,idx,53][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:View Options:h.Text"],[VarSet,idx,54][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:button opacity"],[VarSet,idx,55][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:image opacity"],[VarSet,idx,56][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:text opacity"],[VarSet,idx,57][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:icon size"],[VarSet,idx,58][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:button margin"],[VarSet,idx,59][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:adjust button width"],[VarSet,idx,60][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:disable quick exit"],[VarSet,idx,61][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Global Settings:button height"],[VarSet,idx,62][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Items Count"],[VarSet,idx,63][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Left"],[VarSet,idx,64][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Right"],[VarSet,idx,65][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Top"],[VarSet,idx,66][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Bottom"],[VarSet,idx,67][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Icon"],[VarSet,idx,68][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:ZModeler Options:i.Text"],[VarSet,idx,69][LoopExit]]

                [If,winID==[IGetID,"Zplugin:Smart UI:Brushes Options:a.button opacity"],[VarSet,idx,70][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Alphas Options:b.button opacity"],[VarSet,idx,71][LoopExit]]
                [If,winID==[IGetID,"Zplugin:Smart UI:Materials Options:d.button opacity"],[VarSet,idx,72][LoopExit]]


			]//end loop
            [If,idx != 100,
                [If,[MVarGet,nk_sui_uiSwitchesState,idx]==0,
                    [MVarSet,nk_sui_uiSwitchesState,idx,1]
					,  
                    [MVarSet,nk_sui_uiSwitchesState,idx,0]
                ]
            ]
        ]
    ]//end freeze
]//Routine Startup
[RoutineCall, CheckSystem]

[RoutineDef, read_settings,
    
    [VarSet, settings, file]
    [If, DEBUG, [Note, "[1]Reading settings..\n",,-1]]//DEBUG
    [VarSet, link_file, [FileNameResolvePath,"smart_ui_2020/data/link.zvr"]]
    
    [If, [FileExists, link_file],
    	// Delete the file only when it rebuilt the variable
        [FileDelete, link_file]
        // if the file exists then what reason for loading it ?
        [VarDef, button_var_link(42), "read"]
        ,//else
        //if the var does not exists then we create it
        [VarDef, button_var_link(42), "read"]
    ]

    [If, [MemGetSize, fm_leftsidebar_file],	[MemDelete, fm_leftsidebar_file]]

	[VarSet, counter, 0]
	[VarDef, item, ""]

	[If, [FileExists, settings],
        [If, DEBUG, [Note, "[2]Deleting LINK.ZVR file...\n",,-1]]
		[MemCreateFromFile, fm_leftsidebar_file, settings]
		// max lines to read
		[Loop, 42,
			[VarSet, byte, [MemReadString, fm_leftsidebar_file, item, counter,1,,255]]
			// [Note, [StrMerge, "loop::", n, "::counter::", counter,"::item::", item]]
			
            [VarSet, item, [StrExtract, item, 3, [StrLength, item]-1]]
            // [VarSet, button_var_link(n), ""]//reset
			[VarSet, button_var_link(n), item]
			// [Note, [StrMerge, "item::", button_var_link(n), "\n"],,-1]
			[VarSet, counter, counter + byte]
		,n]
		// [Note, ""]
        [If, DEBUG,
            [Loop, 42,
                [Note, [StrMerge, "link::", [Var,button_var_link(n)],"\n"],,-1]
            ,n]
            [Note,]
        ]
		,//else
		[Note, "Please reinstall the plugin the configuration file do not exists !"]
        [Exit]
	]
	[VarSave, button_var_link, "smart_ui_2020/data/link.zvr"]

,file]

[RoutineDef, adjust_button_width,
    [VarSet, canvasWidth, [IWidth, 1004]]
    // [VarSet, thumb, [IGet, "preferences:thumbnail:t.size"]]
    // compute  how much space we need
    [VarSet, idealWidth, [Val,((width+margin)*count)+(margin*2)]]
    [VarSet, maxItems, 12]

    [If, canvasWidth < idealWidth,

        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]

        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]
        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]
        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
        ]

        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
        ]
        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]
        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]
        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]       
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, width]
            ]
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Text"],
            [If, count <= maxItems,
                [VarSet, width, 150]
                [VarSet, height, 20]
                ,//else
                [VarSet, width, [Val,(canvasWidth-margin-(margin*count))/count]]
                [VarSet, height, 20]
            ]
                
        ]

    ]

, count, height, width, margin]

[RoutineDef, adjust_button_height,

    [VarSet, canvasHeight, [IHeight, 1004]]
    // [VarSet, thumb, [IGet, "preferences:thumbnail:t.size"]]
    // compute  how much space we need
    [VarSet, idealHeight, [Val,((height+margin)*count)+(margin*2)]]

    // TODO : 
    // Define the max item basesd on the icon_size  in global settings
    // 1. it's possible to use the user defined size, then you set the maxitems to that value.
    // 2. if it exceed the canvas edge, then we lower the button height and width value.
    [VarSet, maxItems, 20]

    [If, canvasHeight < idealHeight,

        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]
        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]
        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]
        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]

        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]
        ]
        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]
        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]                
        ]
        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]      
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Icon"], 
            [If, count <= maxItems,
                //we might let these values unchanged
                [VarSet, height, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                [VarSet, width, [IGet, "Zplugin:Smart UI:Global Settings:icon size"]]
                ,//else
                [VarSet, height, [Val,(canvasHeight-(margin*count))/count]]
                [VarSet, width, height]
            ]
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Text"],
            [If, count <= maxItems,
                [VarSet, height, 20]
                [VarSet, width, 150]
                ,//else
                [VarSet, height, [Val,((canvasHeight-(margin*count))/count)]]
                [VarSet, width, 150]
            ]      
        ]
    ]

,count, height, width, margin]


// unused for now
[RoutineDef, create_transparent_background,
    [If, DEBUG, [Note, "[4]Create Transparent Background..\n",,-1]]
	// [RoutineCall, adjust_button_width, count, width]
	[RoutineCall, adjust_button_height, count, height, width, margin]
	[VarSet, tWidth, [Val, 50 + (width + (margin*2))]]
	[VarSet, tHeight, [Val, 50 + ((height + (margin*2)) * count)]]
	[ISet, "Texture:Width", tWidth]
	[ISet, "Texture:Height", tHeight]
	[IPress, "Texture:New"]
	[FileNameSetNext, "UI.png"]
	[IPress, "Texture:Export"]

,count, height, width, margin]


[RoutineDef, preset_interface,
    
    [If, DEBUG,[Note, "[3]Built interface..\n",,-1]]

    [VarDef, button_link(42), ""]
    
    [If, (TOOLBAR != 6),

        // [Note, "is not the subtool toolbar\n",,-1]
        [If, [FileExists, "smart_ui_2020/data/link.zvr"],
            // [VarDef, button_link(42), ""]
            [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
            ,//else 
            [Note, "Exiting.. The link variables does not exists.",,-1]
            [Exit]
        ]
        ,//else
        // only for Subtool toolbar
        // [Note, "This is the subtool toolbar\n",,-1]

        [If, [FileExists, "smart_ui_2020/data/subtools.zvr"],
            // [VarDef, button_link(42), ""]
            [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
            ,//else
            // [VarDef, button_link(count), ""]
            [Note, "subtool list does not exists...",,-1]
        ]
    ]
    
    [If, DEBUG,
        [Note, ">list of links\n",,-1]
        [Loop, count,
            [Note, [StrMerge, ">>", [Var, button_link(n)], "\n"],,-1]
        ,n]
        [Note,]
    ]
	
    [VarSet, hpos, 1]
	[VarSet, vpos, 2]

    //set up the exit button
    [If, (POSITION == 0) || (POSITION == 1) || (POSITION == 2) || (POSITION == 3),
        [VarAdd, hpos, [IHPos,1004] + margin]
        [VarAdd, vpos, [IVPos,1004] + margin]
    ]

    // define default Settings
    [VarSet, bColor,[IGet,"Preferences:Icolors:SW2"]*65536]
	[VarSet, bTextColor,[IGet,"Preferences:Icolors:Text2"]*65536]

	[If,DEBUG,
        [Note, ">Canvas info\n",,-1]
		[Note, [StrMerge, ">>Size : ", hpos, "x", vpos, "\n"],,-1]
	    // [Note, [StrMerge, ">>button opacity: ", bOpacity, "\n"],,-1]
        // [Note, [StrMerge, ">>text opacity: ", bTextOpacity, "\n"],,-1]
        // [Note, [StrMerge, ">>image opacity: ", bImageOpacity, "\n"],,-1]
    ]

	// unnecessary now
	// [RoutineCall, create_transparent_background, count, height, width, margin]
    
    [VarSet, thumbnailState, [IGet, "Preferences:thumbnail:T.thumbnail"]]
    [VarSet, camviewState, [IGet, "Preferences:CamView:CamView On"]]


    // Adjust Icon Size

    [If, (POSITION == 0) || (POSITION == 1),
        
	    [RoutineCall, adjust_button_height, count, height, width, margin]
        [If, POSITION == 0,
            [IUnPress, "Preferences:Thumbnail:T.thumbnail"]
        ]
        [If, POSITION == 1,
            [IUnPress, "Preferences:CamView:CamView On"]
        ]
    ]
    [If, (POSITION == 2) || (POSITION == 3),
	    [RoutineCall, adjust_button_width, count, height, width, margin]
        [If, POSITION == 2,
            [IUnPress, "Preferences:Thumbnail:T.thumbnail"]
            [IUnPress, "Preferences:CamView:CamView On"]        
        ]
        [If, POSITION == 3,
            [IUnPress, "Preferences:Thumbnail:T.thumbnail"]
        ]
    ]

    // Display the Debug log before the NoteIbutton
    [If, DEBUG,
        [Note, "\nEnd of the log (part 1)\n",,-1]
        [Note,,,,,,,,,,0,0]
    ]
    
    [VarSet, screenWidth, [Val, [IWidth,1008]]]
    [VarSet, screenHeight, [Val, [IHeight,1008] + [IHeight, 1001]]]

    [NoteIButton, //text
        ,  // image
        ,0 // pressed
        ,1 // disabled
        ,0//hpos
        ,0//[IHPos, 1001]+20//vpos
        ,screenWidth // hsize
        ,screenHeight //vSize
        , // color
        ,0xffffff // text color
        ,0 // opacity
        ,1 // text opacity
        ,1 // image opacity
    ]

    [NoteIButton, //text
        ,  // image
        ,0 // pressed
        ,[IGet, "Zplugin:Smart UI:Global Settings:disable quick exit"] // disabled
        ,1 //hpos
        ,1 //vpos
        ,screenWidth-8 // hsize
        ,screenHeight-8 //vSize
        ,0x000000 // color
        ,0xffffff // text color
        ,0 // opacity
        ,1 // text opacity
        ,1 // image opacity
    ]
    
    // counter to assi the proper routines to the Button Items
    [VarSet, buttonID, 1]

    // Add Column Support
    // [VarSet, second_column, 0]

    [Loop, count,
        // Add second column for toolbar on Right
        // [If, POSITION == 0,
        //     [If, second_column >= [IHeight, 1004],
        //         [VarSet, hpos, hpos+width+(margin*2)]
        //     ]
        // ]
        // // Add second column for toolbar on Right
        // [If, POSITION == 2,
        //     [If, second_column >= [IHeight, 1004],
        //         [VarSet, hpos, hpos-width+(margin*2)]
        //     ]
        // ]
        
        // Add NoteISwitch support 
        // IMPORTANT :
        // The is_switch_item routine from the zbrushlib dll,
        // do only for checking what path is entered into the some specific toolbars:
        // for GEOMETRY the user can customize the menu using button path in the interface,
        // this involve the user can think Switches and Slider will be displayed.
        // for SLIDER there is no Support for it in ZSCRIPT and NoteInterface (add a label)
        // for SWITCH , Why not to let them choose, but it's not handy, as you need too much actions from the user which kill the purpose of having a fast way to 
         
        // so we should add a special label (as warning for the user to )
        // for VIew. Should be it customizable or that miss the purpose of havins a toolbar for all is view.

        [If, (TOOLBAR == 2) || (TOOLBAR == 6) || (TOOLBAR == 7),        
            [VarSet, switchState, 0]
            [RoutineCall, is_switch_item, [Var, button_link(n)], switchState]
        ]

        
        [VarSet, text_path, ""] //reset ?
        [VarSet, icon_path, ""] //reset ?
        
        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Brushes Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""] //no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Brushes Options:a.Button Opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]

            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_brush_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "brush::icon::", icon_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 0) && [IGet, "Zplugin:Smart UI:Brushes Options:a.Text"],
                
            [VarSet, icon_path, ""]//no icon
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]                

            [VarSet, text_path, ""]//reset
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]

            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]
            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "brush::text::", text_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Icon"],
            [If, DEBUG,[Note, [StrMerge, "Alpha Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""]// no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Alphas Options:b.Button Opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]//reset
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]
            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_alpha_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "alpha::icon::", icon_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 1) && [IGet, "Zplugin:Smart UI:Alphas Options:b.Text"],
                
            // clear the icon path
            [VarSet, icon_path, ""]
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]

            [VarSet, text_path, ""]
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]
           
            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]
            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "alpha::text::", text_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Geo Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""]// no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]//reset
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]
            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_material_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "geo::icon::", icon_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 2) && [IGet, "Zplugin:Smart UI:Geometry Options:c.Text"],
                
            // clear the icon path
            [VarSet, icon_path, ""]
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]

            [VarSet, text_path, ""]
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]

            [RoutineCall, get_buttonpath_label, text_path]
            // [Note, text_path,,-1]
            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]
            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "geo::text::", text_path,"\n"],,-1]]
            ]
        ]
        
        // [Note, ]



        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Icon"],
            [If, DEBUG,[Note, [StrMerge, "Material Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""]// no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Materials Options:d.Button Opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]//reset
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 9,[StrLength, [Var, button_link(n)]]]]
            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_material_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "material::icon::", icon_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 3) && [IGet, "Zplugin:Smart UI:Materials Options:d.Text"],
                
            // clear the icon path
            [VarSet, icon_path, ""]
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]

            [VarSet, text_path, ""]
            [If, DEBUG, [Note, [StrMerge, "material::text::", text_path,"\n"],,-1]]

            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 9,[StrLength, [Var, button_link(n)]]]]

            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]

            ]
            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "material::text::", text_path,"\n"],,-1]]
            ]
         
        ]
        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Icon"],
            [If, DEBUG,[Note, [StrMerge, "Macro Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""]// no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]//reset
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]
            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_macro_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "macro::icon::", icon_path,"\n"],,-1]]
            ]

        ]
        [If, (TOOLBAR == 4) && [IGet, "Zplugin:Smart UI:Macros Options:e.Text"],
                
            // clear the icon path
            [VarSet, icon_path, ""]
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]

            [VarSet, text_path, ""]
            [If, DEBUG, [Note, [StrMerge, "macro::text::", text_path,"\n"],,-1]]
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]
            [RoutineCall, get_buttonpath_label, text_path]
            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]

            ]
            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "macro::text::", text_path,"\n"],,-1]]
            ]
         
        ]


        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Primitives Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""] //no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]

            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_primitive_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "primitive::icon::", icon_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 5) && [IGet, "Zplugin:Smart UI:Primitives Options:f.Text"],
                
            [VarSet, icon_path, ""]//no icon
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]                

            [VarSet, text_path, ""]//reset
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]


            
            // so we need to get the label name which is in parenthesis
            // exe arrow3d(long arrow)
            [RoutineCall, get_pretty_title, text_path]
            
            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]

            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "primitive::text::", text_path,"\n"],,-1]]
            ]
        ]


        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Subtools Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""] //no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 0,[StrLength, [Var, button_link(n)]]]]

            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_subtool_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "subtool::icon::", icon_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 6) && [IGet, "Zplugin:Smart UI:Subtools Options:g.Text"],
                
            [VarSet, icon_path, ""]//no icon
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]                

            [VarSet, text_path, ""]//reset
            [VarSet, text_path, [StrExtract, button_link(n), 0,[StrLength, button_link(n)]]]
            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]
            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "subtool::text::", text_path,"\n"],,-1]]
            ]
        ]

        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Display Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""] //no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]

            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_subtool_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "display::icon::", icon_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 7) && [IGet, "Zplugin:Smart UI:View Options:h.Text"],
                
            [VarSet, icon_path, ""]//no icon
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]                

            [VarSet, text_path, ""]//reset
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 5,[StrLength, [Var, button_link(n)]]]]

            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]

            ]
            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "display::text::", text_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Icon"],

            [If, DEBUG,[Note, [StrMerge, "Brushes Toolbar ",TOOLBAR,"\n"],,-1]]

            [VarSet, text_path, ""] //no text
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]

            [VarSet, icon_path, ""]
            [VarSet, icon_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]

            [If, [StrLength, icon_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                [RoutineCall, get_brush_icon_path, icon_path]
                // display full path
                [If, DEBUG, [Note, [StrMerge, "zmodeler::icon::", icon_path,"\n"],,-1]]
            ]
        ]
        [If, (TOOLBAR == 8) && [IGet, "Zplugin:Smart UI:ZModeler Options:i.Text"],
                
            [VarSet, icon_path, ""]//no icon
            [VarSet, bOpacity, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
            [VarSet, bTextOpacity, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
            [VarSet, bImageOpacity, 0]                

            [VarSet, text_path, ""]//reset
            [VarSet, text_path, [StrExtract, [Var, button_link(n)], 6,[StrLength, [Var, button_link(n)]]]]

            // adjust button size to text width
            [If, [IGet, "zplugin:Smart UI:Global Settings:Adjust Button Width"],
                [VarSet, width, [TextCalcWidth, text_path]]
                [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button height"]]
            ]

            [If, [StrLength, text_path] == 0,
                [Note, "can't to define the path of icon. Exiting...\n",,-1]
                [Exit]
                ,//else
                // display full path
                [If, DEBUG, [Note, [StrMerge, "zmodeler::text::", text_path,"\n"],,-1]]
            ]
        ]

        [If, (POSITION == 0),
	        
            [NoteIButton, text_path
                , icon_path
                , 0 //pressed
                , 0 //disabled
                , hpos //HPos
                , vpos //VPos
                , width //HSize
                , height //VSize
                , bColor //color
                , bTextColor //text color
                , bOpacity
                , bTextOpacity
                , bImageOpacity
            ]
            [VarSet, vpos, [Val, vpos + height + margin]]
            // [If, (TOOLBAR == 2) || (TOOLBAR == 6) || (TOOLBAR == 7),

            //     [If, switchState != 1,
            //         [NoteIButton, text_path
            //             , icon_path
            //             , 0 //pressed
            //             , 0 //disabled
            //             , hpos //HPos
            //             , vpos //VPos
            //             , width //HSize
            //             , height //VSize
            //             , bColor //color
            //             , bTextColor //text color
            //             , bOpacity
            //             , bTextOpacity
            //             , bImageOpacity
            //         ]
            //         [VarSet, vpos, [Val, vpos + height + margin]]
            //         ,//else
            //         [NoteISwitch, text_path
            //             , icon_path
            //             , 0 //pressed
            //             , 0 //disabled
            //             , hpos //HPos
            //             , vpos //VPos
            //             , width //HSize
            //             , height //VSize
            //             , bColor //color
            //             , bTextColor //text color
            //             , bOpacity
            //             , bTextOpacity
            //             , bImageOpacity
            //         ]
            //         [VarSet, vpos, [Val, vpos + height + margin]]
            //     ]
            // ]

        ]
        [If, (POSITION == 1),
	        
            [NoteIButton, text_path
                , icon_path
                , 0//pressed
                , 0//disabled
                , ([IHPos,1004]-width-margin)+[IWidth, 1004]-20//HPos
                , vpos //VPos
                , width //HSize
                , height //VSize
                , bColor //color
                , bTextColor //text color
                , bOpacity
                , bTextOpacity
                , bImageOpacity
            ]
            [VarSet, vpos, [Val, vpos + height + margin]]
        ]
        [If, (POSITION == 2),
	        
            [NoteIButton, text_path
                , icon_path
                , 0 //pressed
                , 0 //disabled
                , hpos //HPos
                , vpos //VPos
                , width //HSize
                , height //VSize
                , bColor //color
                , bTextColor //text color
                , bOpacity
                , bTextOpacity
                , bImageOpacity
            ]
            [VarSet, hpos, [Val, hpos + width + margin]]

        ]
        [If, (POSITION == 3),
	        
            [NoteIButton, text_path
                , icon_path
                , 0 //pressed
                , 0 //disabled
                , hpos//HPos
                , ([IVPos, 1004]+[IHeight, 1004])-height-20 //VPos
                , width //HSize
                , height //VSize
                , bColor //color
                , bTextColor //text color
                , bOpacity
                , bTextOpacity
                , bImageOpacity
            ]
            [VarSet, hpos, [Val, hpos + width + margin]]

        ]
        [VarInc, buttonID]
    ,n]
    // [note,]
    // intercept result of the Note and display the toolbar.
    [VarSet, result, [Note,,,,0,,0,,0,0,,,""]]

    [If, DEBUG, [Note, [StrMerge, result, "\n"],,-1]]

    [VarSet, routineID, 0]
    // [Note, result]
    [Loop, [Val, count+3],
        
        [If, ([Var, result] == n),
            [If, ([Var, result] == 2) || ([Var, result] == 0) || ([Var, result] == 1),
                [If, DEBUG, [Note, "exit or enter pressed\n",,-1]]
                [LoopExit]
                ,//else
                [RoutineCall, [StrMerge, "button_", [Val, routineID - 3]],[Val,count]]
            ]
        ]
        [VarInc, routineID]
    ,n]

    // restore Thumbnail and camview
    [If, thumbnailState, [ISet, "Preferences:thumbnail:T.thumbnail",1]]
    [If, camviewState, [ISet, "Preferences:CamView:CamView On",1]]

    // TODO : Should not run when Subtools toolbar gets call
    [If, TOOLBAR != 6, 
        [VarSave, button_link, "smart_ui_2020/data/link.zvr"]
    ]

    
,count,width,height,margin]


//
//  TOOLBARS ICONS
//
// BRUSHES TOOLBAR
[RoutineDef, get_brush_icon_path,
    // [Note, [StrMerge, icon, "\n"],,-1]
    // [If, [StrLength, icon] == 0,
    //     [Note, [StrMerge, "can't found the ", icon,],,-1]
    // ]
    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\BrushPresets\", temp_icon, ".ZBP"]]
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
        [VarSet, icon_path, [StrMerge, "ZBRUSH_ZStartup\BrushPresets\", temp_icon, ".ZBP"]]
        [VarSet, icon_path, [FileNameResolvePath, icon_path]]
        [If, [FileExists, icon_path],
            [VarSet, icon, icon_path]
            ,//else
            [Note, [StrMerge, "issue spotted::", icon_path],,-1]
        ]
    ]
    // [Note, [StrMerge, "get path icon::", icon_path,"\n"],,-1]
,icon]

// MATERIALS TOOLBAR
[RoutineDef, get_material_icon_path,
    [If, DEBUG, [Note, [StrMerge, "Set material icon path\n",""],,-1]]
    // [If, [StrLength, icon] == 0,
    //     [Note, [StrMerge, "can't found the ", icon,],,-1]
    // ]
    [VarSet, temp_icon, icon]
    [If, DEBUG, [Note, [StrMerge, temp_icon, "\n"],,-1]]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]

	[VarSet, icon_path, ""]    
    [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Materials\Matcap\", temp_icon, ".ZMT"]]
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
        [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Materials\Startup\", temp_icon, ".ZMT"]]
        [VarSet, icon_path, [FileNameResolvePath, icon_path]]
        // [Note, icon_path ,,-1]

        [If, [FileExists, icon_path],
            [VarSet, icon, icon_path]
            ,//else
            [VarSet, icon_path, [StrMerge, "ZBRUSH_ZStartup\Materials\", temp_icon, ".ZMT"]]
            [VarSet, icon_path, [FileNameResolvePath, icon_path]]
            // [Note, icon_path ,,-1]
            [If, [FileExists, icon_path],
                [VarSet, icon, icon_path]
                ,//else
                [If, ([StrFind,"flat color", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"DarkenEdge", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"fiber1", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"hair1", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"hair2", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"trishaders", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"quadshaders", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"MatCap Red Wax", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"RGB Levels", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"HSVColorizer", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [If, ([StrFind,"FresnelOverlay", temp_icon] == -1),
                    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\materials\", temp_icon, ".ZMT"]]
                ]
                [VarSet, icon_path, [FileNameResolvePath, icon_path]]
                [If, [FileExists, icon_path],
                    [VarSet, icon, icon_path]
                    ,//else
                    [Note, "issue spotted with material icons !",,-1]
                ]
            ]
        ]
    ]
,icon]

// ALPHAS TOOLBAR
[RoutineDef, get_alpha_icon_path,
    [If, DEBUG, [Note, [StrMerge, "Set alpha icon path\n",""],,-1]]

    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    // [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Alphas\", temp_icon, ".PSD"]]
    [VarSet, icon_path, [StrMerge, "smart_ui_2020\icons\alphas\", temp_icon, ".PSD"]]
    
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]

        // TODO :
        // manage more format type (jpg, png, bmp )
        [VarDef, icon_format(5), ""]
        [VarSet, icon_format(0), ".PSD"]
        [VarSet, icon_format(1), ".PNG"]
        [VarSet, icon_format(2), ".JPG"]
        [VarSet, icon_format(3), ".JPEG"]
        [VarSet, icon_format(4), ".BMP"]
        [Loop, 5,

            [VarSet, icon_path, [StrMerge, "ZBRUSH_ZStartup\Alphas\", temp_icon, icon_format(n)]]
            [VarSet, icon_path, [FileNameResolvePath, icon_path]]
            [If, [FileExists, icon_path],
                [VarSet, icon, icon_path]
                ,//else
                // [RoutineCall, get_custom_path]
                // [VarSet, icon_path, [StrMerge, custom_path, temp_icon, ".PSD"]]
                // [VarSet, icon_path, [FileNameResolvePath, icon_path]]
                // [If, [FileExists, icon_path],
                //     [VarSet, icon, icon_path]
                //     ,//else
                //     [Note, "issue spotted!",,-1]
                // ]
                [Note, "issue spotted!",,-1]
            ]

        ,n]
    ]
,icon]

// MACROS TOOLBAR
[RoutineDef, get_macro_icon_path,
    [If, DEBUG, [Note, [StrMerge, "Set macro icon path\n",""],,-1]]

    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    // [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Alphas\", temp_icon, ".PSD"]]
    [VarSet, icon_path, "smart_ui_2020\icons\macros\macro.PSD"]
    
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
    ]
,icon]

// PRIMITIVES TOOLBAR
[RoutineDef, get_primitive_icon_path,
    [If, DEBUG, [Note, [StrMerge, "Set primitive icon path\n",""],,-1]]

    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    // [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Alphas\", temp_icon, ".PSD"]]
    [VarSet, icon_path, "smart_ui_2020\icons\primitives\primitive.PSD"]
    
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
    ]
,icon]

// ZMODELER BRUSHES TOOLBAR
[RoutineDef, get_zmodeler_icon_path,
    
    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    [VarSet, icon_path, [StrMerge, "smart_ui_2020\assets\zmodeler\", temp_icon, ".PSD"]]
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
        
        // TODO : should be a custom user location !

        [VarSet, icon_path, [StrMerge, "ZBRUSH_ZStartup\BrushPresets\", temp_icon, ".PSD"]]
        [VarSet, icon_path, [FileNameResolvePath, icon_path]]
        [If, [FileExists, icon_path],
            [VarSet, icon, icon_path]
            ,//else
            [Note, [StrMerge, "issue spotted::", icon_path],,-1]
        ]
    ]
    // [Note, [StrMerge, "get path icon::", icon_path,"\n"],,-1]
,icon]



// TODO : need to add switch detection for switch (geometry toolbar)

[RoutineDef, is_switch_item,

    [VarSet, buttonPath, [StrLower, buttonPath]]
	
	[If, [StrLength, buttonPath]== 0, [Note, "Error, exit.."][Exit]]

	[If, [IExists, buttonPath] != 1,
		[Note, "Button does not exists, exiting...",,-1]
		[Exit]
	]
    //create buffer for response string
	//this buffer can also pass a string to the dll (such as a second file path)
	[VarSet, ERROR, -1]
	[VarSet, ERROR, [FileExecute,[Var,zbrushLibPath], "IsSwitchType", buttonPath]]
	[If, ERROR < 0,
		[Note,"An error has occured",,-1]
		[Exit]
		,// else
		[If, ERROR == 1,
			[Note, [StrMerge, buttonPath, " is a switch item."],,-1]
			,// else
			[If, ERROR == 0,
				[Note, [StrMerge, buttonPath, " is not a switch item."],,-1]
			]
		]
	]
    [VarSet, state, ERROR]
,buttonPath, state]


//
// for MACRO and GEOMETRY MODIFIERS ONLY
//

[RoutineDef, get_buttonpath_label,
    [If, DEBUG, [Note, [StrMerge, "Determine text label from button path...\n",""],,-1]]

    [If, [StrLength, label] == 0,
        [Note, "error\n",,-1]
    ]

    [VarSet, tempLabel, ""]
    [VarSet, separator, [StrFromAsc, 58]]
    [VarDef, backline, [StrMerge, [StrFromAsc, 13],[StrFromAsc, 10]]]
    [VarDef, argument(12), ""]
    [VarSet, argCounter, 0]
    
    [Loop, [StrLength, label],
        [VarSet, char, [StrExtract, label, n,n]]
        [If, ([StrFind, separator, char] == 0) || ([StrFind, backline, char] == 0),
            [VarSet, argument(argCounter), tempLabel]
            [VarInc, argCounter]
            // [Note, tempLabel]
            [VarSet, tempLabel, ""]//reset for the next argument
            ,//else
            //combine character till we don't hit the separator ":"
            [VarSet, tempLabel, [StrMerge, tempLabel, char]]
        ]
    ,n]
    // do not forget the last argument not taken in the loop
    [VarSet, argument(argCounter), tempLabel]
    // [Note, argument(argCounter)]

    //start at the last value in the var list
    [VarSet, minus, 11]
    [Loop, 12,
        // [Note, [StrMerge, minus, ">>>", argument(minus), "\n"],,-1]
        [If, [StrLength, [Var, argument(minus)]] != 0,
            [LoopExit]
            ,//else
            [VarDec, minus]
            // [LoopContinue]
        ]
    ,n]
    // [Note,]
    [If, argCounter < 1,
        [VarSet, label, [Var, label]]
        ,//else
        [VarSet, label, [Var, argument(minus)]]
    ]
    // [VarSet, label, [Var, argument(minus)]]
        
,label]


//
//  SUBTOOLS TOOLBAR
//


[RoutineDef, get_subtool_icon_path,
    [If, DEBUG, [Note, [StrMerge, "Set subtool icon path\n",""],,-1]]

    [VarSet, temp_icon, icon]
    [If, [StrLength, temp_icon] == 0,
        [Note, "error\n",,-1]
    ]
	[VarSet, icon_path, ""]
    // [VarSet, icon_path, [StrMerge, "ZBRUSH_ZData\Alphas\", temp_icon, ".PSD"]]
    [VarSet, icon_path, "smart_ui_2020\icons\subtools\subtool.PSD"]
    
    [VarSet, icon_path, [FileNameResolvePath, icon_path]]

    // [Note, icon_path,,-1]
        
    [If, [FileExists, icon_path],
        [VarSet, icon, icon_path]
        // [Note, [StrMerge, "icon !!!:", icon,"\n"],,-1]
        ,//else
    	// [VarSet, icon_path, ""]
    ]
,icon]

[RoutineDef, get_subtool_settings,
    [IFreeze, 
        [If, [FileExists, "smart_ui_2020/data/subtools.zvr"],
            [FileDelete, "smart_ui_2020/data/subtools.zvr"]
        ]

        // [VarSet, current_subtool, -1]
        [VarSet, current_subtool, [SubToolGetActiveIndex]]
        [VarDef, button_link(42),""]
        
        [Loop, 42,
            [SubToolSelect,n]
            [VarSet, stName, [IGetTitle,"Tool:Subtool:ItemInfo"]]
            [VarSet, stName, [StrExtract, stName, 0, [StrLength, stName]-2]]//trim end period
            [VarSet, button_link(n), stName]
        ,n]
        
        [VarSave, button_link, "smart_ui_2020/data/subtools.zvr"]
        [SubToolSelect, [Var, current_subtool]]

        // [VarDef, subtool_list(2), -1]
        // [VarSet, subtool_list(0), [IGet, "Tool:Item Info"]]
        // [VarSet, subtool_list(1), [SubToolGetCount]]
        // [VarSave, subtool_list, "smart_ui_2020/data/subtools_history.zvr"]
    ]
    [If, DEBUG, [Note, "Subtool list has been built.\n",,-1]]
,count]


[RoutineDef, select_subtool_by_title,
    [VarSet, inc, 0]
    [VarSet, subToolPath, subtool]
    [VarSet,subToolPath, [StrMerge, "tool:subtool:",subToolPath]]
    [SubToolSelect, 0]
    [If, [IExists, subToolPath],
        [IPress,subToolPath]
        ,//else
        [Loop, [SubToolGetCount],
            [ISet,"Tool:SubTool:SubTool ScrollBar",0,[SubToolGetCount]-inc]
            [If, [IExists, subToolPath],
                [IPress,subToolPath]
                [Exit]
            ]
            [VarInc, inc]    
        ]
    ]
,subtool]

// TODO :
//  toggle visibility, polypaint then lately add, sub and intersect ?
[RoutineDef, make_subtool_switches_button,

    // Here define a NoteISwitch-es inline, with proper size and label.
    // add visibility
    // add polypaint

,label]


// manipulate string for primitive toolbar with pretty custom label names
[RoutineDef, get_pretty_title,

    [VarSet, oParenthesis, [StrFromAsc, 40]]
    [VarSet, cParenthesis, [StrFromAsc, 41]]
    // let trim the button name
    [VarSet, tempLabel, ""]
    [VarSet, counter, 0]
    [Loop, [StrLength, label],
        [VarSet, char, [StrExtract, label,n,n]]
        [If, ([StrFind, char, oParenthesis] == 0),
            [VarSet, tempLabel, ""]
            ,//else
            [If, ([StrFind, char, cParenthesis] == 0),
                [LoopExit]
                ,//else
                [VarInc, counter]
                [VarSet, tempLabel, [StrMerge, tempLabel, char]]
            ]
        ]
    ,n]

    [VarSet, nextLabel, ""]
    [Loop,[StrLength, tempLabel],
        [VarSet, char, [StrExtract, tempLabel,n,n]]
        [If, ([StrFind, char, oParenthesis] == 0),
            [LoopContinue]
            ,//else
            [If, ([StrFind, char, cParenthesis] == 0 ),
                [LoopExit]
                ,//else
                [VarSet, nextLabel, [StrMerge, nextLabel, char]]
            ]
        ]
    ,n]
    [VarSet, label, nextLabel]
    [If, DEBUGPRIMITIVE, [Note, [StrMerge, "Label>>", label, "\n"],,-1]]

,label]

[RoutineDef, display_debug_log,
    [If, DEBUGPRIMITIVE, [Note,]]
]






//
//  PARAMETRIC PRIMITIVES ARGUMENTS
//

// Read line and cut in part at ":" separator
// create a varlist of 12 items ( not too much ?)
// and return the last value only.
[RoutineDef, read_line,

    [VarSet, line, label]
    [VarSet, tempLabel, ""]
    [VarSet, separator, [StrFromAsc, 58]] // 58 = ":"
    [VarDef, backline, [StrMerge, [StrFromAsc, 13],[StrFromAsc, 10]]]
    [VarDef, list(5), ""]
    [VarSet, list(0), ""]
    [VarSet, list(1), ""]
    [VarSet, list(2), ""]
    [VarSet, list(3), ""]
    [VarSet, list(4), ""]
    [VarSet, argCounter, 0]
    
    [Loop, [StrLength, line],
        [VarSet, char, [StrExtract, line, n,n]]
        [If, ([StrFind, separator, char] == 0) || ([StrFind, backline, char] == 0),
            [VarSet, list(argCounter), tempLabel]
            [VarInc, argCounter]
            [If, DEBUGPRIMITIVE, [Note, [StrMerge, "argument : ", tempLabel]]]
            //reset for the next argument
            [VarSet, tempLabel, ""]
            ,//else
            //combine character till we don't hit the separator ":"
            [VarSet, tempLabel, [StrMerge, tempLabel, char]]
            // [Note, char]
        ]
    ,n]
    // do not forget the last argument not taken in the loop
    [VarSet, list(argCounter), tempLabel]
    
    [If, DEBUGPRIMITIVE, [Note, list(argCounter)]]

    //start at the last value in the var list
    [VarSet, minus, 4]
    [Loop, 5,
        // [Note, [StrMerge, minus, ">>>", list(minus), "\n"],,-1]
        [If, [StrLength, list(minus)] != 0,
            [LoopExit]
            ,//else
            [VarDec, minus]
            // [LoopContinue]
        ]
    ,n]
    // [Note,]
    [If, argCounter < 1,
        [VarSet, label, [Var, label]]
        ,//else
        //return the last valid var in the list
        [VarSet, label, [Var, list(minus)]]
    ]

, label]

// Read a string and store each value into a varlist of 13 items
// return the original variable
[RoutineDef, read_arguments,
    
    [If, DEBUGPRIMITIVE, [Note, [StrMerge, "Read Arguments list..\n", line]]]

    [If, [FileExists, "Smart_UI_2020/data/arguments.zvr"], [FileDelete, "Smart_UI_2020/data/arguments.zvr"]]

    [VarSet, tempLabel, ""]
    [VarSet, separator, [StrFromAsc, 32]] //whitespace
    [VarDef, backline, [StrMerge, [StrFromAsc, 13],[StrFromAsc, 10]]]

    // let clean up all the variable in the list
    [VarDef, args(20), ""]
    [Loop, 20,
        [VarSet, args(n), ""]
    ,n]

    [VarSet, argCounter, 0]
    
    [Loop, [StrLength, line],
        [VarSet, char, [StrExtract, line, n,n]]
        [If, ([StrFind, separator, char] == 0) || ([StrFind, backline, char] == 0),
            [VarSet, args(argCounter), tempLabel]

            [If, DEBUGPRIMITIVE, [Note, [StrMerge, tempLabel, "\n"],,-1]]
            [VarInc, argCounter]
            [VarSet, tempLabel, ""]//reset for the next argument
            ,//else
            // combine character till we don't hit the separator ":"
            [VarSet, tempLabel, [StrMerge, tempLabel, char]]
        ]
    ,n]
    
    // do not forget the last argument not taken in the loop
    [VarSet, args(argCounter), tempLabel]
    [VarSet, line, args(0)]
    // clean up
    [VarSave, args, "Smart_UI_2020/data/arguments.zvr"]
,line]

// ROUTINES For Primitives & Geometry modifiers Toolbars

// apply parameters for Primitives / QShapes 
[RoutineDef, apply_parameters,
    
    // get the last text after ":"
    [RoutineCall, read_line, text]
    
    // Read the line and create a varlist to store each values.
    [RoutineCall, read_arguments, text]

    
    [VarSet, winID, 0]
    [VarSet, qmesh, 0]

    // load parameters
    [VarDef, args(20), ""]
    [VarLoad, args, "Smart_UI_2020/data/arguments.zvr"]    
        
    // scan from end if the value is null
    // minus should be the total of paramaters
    [VarSet, minus, 19]
    [Loop, 20,
        [If, [StrLength, args(minus)] == 0,
            // empty argument continue..
            [If, DEBUG, [Note, "Empty\n",,-1]]
            [VarDec, minus]
            ,//else
            [LoopExit]
        ]
    ,n]
    
    [If, DEBUGPRIMITIVE, [Note, [StrMerge, minus, ">>Parameter>>", [Var, args(0)],"\n"],,-1]]

    // arg(0) contain the "("pretty-title")" remove it
    [VarSet, type, ""]
    [VarSet, type, [StrLower, args(0)]]
    [RoutineCall, split_command, type]
    
    // setup for QShapes else standard primitives
    // TODO : do it only if TOOLBAR == 5 (primitive toolbar)
    // so we can have another branch for Geometry toolbar
    [If, TOOLBAR == 5,
        [If, ([StrFind, "qcube", type] == 0) || ([StrFind, "qsphere", type] == 0) || ([StrFind, "qgrid", type] == 0) || ([StrFind, "qcyl", type] == 0),
            
            // TODO : backup the current tool id so we could append the primitive
            [If, 1, [Note, [StrMerge, "QSHAPE : ", type, "\n"],,-1]]
            [If, APPENDMODE, 
                [VarSet, currentTool, [IGet, "Tool:Item Info"]]
            ]
            [IPress, "Tool:PolyMesh3D"]
            [VarSet, qmesh, 1]
            ,//else
            [If, DEBUGPRIMITIVE, [Note, [StrMerge, "Standard Primitive : ", type, "\n"],,-1]]

            [VarSet, qmesh, 0]
        ]   
    ]
    // loop as many time as the varlist contain data
    [Loop, minus+1,
        // only at the very first iteration
        [If, n == 0,
            // if it a classic primitives not QCube etc..
            [If, (qmesh == 0) && (TOOLBAR == 5),

                [VarSet, primitive_path, [Var, args(0)]]
                [RoutineCall, split_command, primitive_path]

                [If, DEBUGPRIMITIVE, [Note, [StrMerge, "primitive path is : ", primitive_path, "\n"],,-1]]

                [VarSet, path, [StrMerge, "Tool:", primitive_path]]

                // TODO : backup the current tool id so we could append the primitive
                [If, APPENDMODE, //[IGet, "Zplugin:Smart UI:Subtools Options:Append Subtool"],
                    [VarSet, currentTool, [IGet, "Tool:Item Info"]]
                ]

                [If, [IExists, path],
                    [IPress, path]
                    // set it now only at the first loop iteration
                    [VarSet, winID, [IGetID, "Tool:Initialize:Align X"]]
                    ,//else
                    [Note, "The primitive shape do not exists in tool palette or has a different name.",,-1]
                ]
            ]
            [If, (qmesh == 1) && (TOOLBAR == 5),
                // set it now, before to enter the loop
                [VarSet, winID, [IGetID, "Tool:Initialize:X Res"]]
            ]

            [If, TOOLBAR == 2,
                [Note, "Geometry modifier start setup..\n"]
                //backup for later use
                [VarSet, target_button, [IGetID, "Tool:Geometry:ZRemesher"]]

                [VarSet, windID, [IGetID, "Tool:Geometry:ZRemesher"] + 1]
            ]
            ,//else
            // if the argument is "null/pass" then we just continue
            // without to set a value and we increment the winID.
            [If, [StrFind, "pass", args(n)] == 0,
                [If, DEBUGPRIMITIVE, [Note, [StrMerge, "Skip Argument ->", n, "->", [IGetTitle, winID], "->", args(n), "\n"],,-1]]

                [VarInc, winID]
                [LoopContinue]
            ]
            // if the item exists we set the item with our data
            [If, [IExists, winID],
                [If, DEBUGPRIMITIVE, [Note, [StrMerge, n, " >> ", [IGetTitle, winID], " >> ", args(n), "\n"],,-1]]

                // we serve the current winID with our data
                [ISet, winID, [Var, args(n)]]

                // we press the Qshape button after we set the parameters.
                [If, (qmesh == 1) && (TOOLBAR == 5),
                    [IPress, [StrMerge, "Tool:Initialize:", type]]
                ]
                [If, TOOLBAR == 2,
                    [IPress, [StrMerge, "Tool:geometry:Zremesher", ""]]
                ]
                ,//else
                // if the Winid doesn't exist we assume we are off the limit that
                // we exit to prevent other issues and error messages.

                [Note, "Too many arguments, please make sure your config file are valid.\n",,-1]
                // [Note, [StrMerge, "issue : ", [Var, args(n)], ">", n ,"\n"]]
                [Exit]
            ]
            // increment only the first loop
            [VarInc, winID]
        ]
    ,n]

    // TODO : backup the current tool id so we could append the primitive
    [If, (APPENDMODE == 1) && (TOOLBAR == 5), // [IGet, "Zplugin:Smart UI:Subtools Options:Append Subtool"],
        [IPress, "Tool:Make Polymesh3d"]
        [IPress, "Tool:Subtool:Copy"]
        [IKeyPress, '2', [IPress, "Tool:Subtool:Delete"]]
        [ISet, "Tool:Item Info", currentTool]
        [IPress, "Tool:Subtool:Paste"]
    ]

    [RoutineCall, display_debug_log]

,text]

// Routine to Split the the button path args(0) before the (pretty_title)
[RoutineDef, split_command, 
    
    [VarSet, temp_cmd, ""]
    [VarSet, oParenthesis, [StrFromAsc, 40]] // (start parenthesis "(")

    [Loop,[StrLength, text],
        [VarSet, char, [StrExtract, text,n,n]]
        [If, ([StrFind, char, oParenthesis] == 0),
            // we stop here
            [LoopExit]
            ,//else
            [VarSet, temp_cmd, [StrMerge, temp_cmd, char]]
        ]
    ,n]

    [VarSet, text, temp_cmd]
    [If, DEBUGPRIMITIVE, [Note, text,,-1]]

,text]


//
// ZMODELER ROUTINES
//

[RoutineDef, get_zmodeler_brush,

    [If, DEBUG, [Note, [StrMerge, "Zmodeler toolbar\n", ],,-1]]
    [If, ([IExists, path] != 1),
        //if the button do not exits then check for the brush (native path, then custom path) 
        [VarSet, brush, [StrExtract, path, 6,[StrLength, path]]]
        [VarSet, file, [StrMerge, "smart_ui_2020\assets\zmodeler\", brush, ".ZBP"]]
        [VarSet, file, [FileNameResolvePath, file]]
        [If, DEBUG, [Note, file]]
        [If, [FileExists, file],
            [FileNameSetNext, file]
            [IPress, "Brush:load brush"]
            [Exit]
        ]
        ,//else
        [VarSet, brush, [StrExtract, path, 6,[StrLength, path]]]
        [VarSet, file, [StrMerge, "smart_ui_2020\assets\custom\", brush, ".ZBP"]]
        [VarSet, file, [FileNameResolvePath, file]]
        [If, [FileExists, file],
            [FileNameSetNext, file]
            [IPress, "Brush:load brush"]
            [Exit]
            ,//else
            [If, DEBUG, [Note, "Can't fount the Zmodeler brush !!!"]]
        ]
    ]

,path]





[RoutineDef,HelpInterface,//main interface

	[VarSet,backimage,"smart_ui_2020/docs/pg1.psd"]
	[VarSet,pageNo,1]//the page we're on
	[VarSet,backOpacity,0.5]
	[VarSet,backDisabled,1]
	[VarSet,forwardOpacity,1]
	[VarSet,forwardDisabled,0]
	[VarSet,imageShow,1]
	[VarSet,imageDisabled,0]
		
	[IFreeze,//makes operation smooth
	[Loop,1000,//loop for selections, until Serve Now or Cancel choice ends loop
	//draw the interface 

		[If, pageNo == 1,
			//show ZBrush 4R7 image
			[VarSet,imageShow,0]
			[VarSet,imageDisabled,1]
			,//else
			//don't show ZBrush 4R7 image
			[VarSet,imageShow,0]
			[VarSet,imageDisabled,1]
		]

		//background image - the other buttons are positioned relative to this
		[NoteIButton, //text
			,#backimage //image
			,//pressed
			,1	//disabled
			,1 //HPos
			,1 //VPos
			,650 //HSize
			,900 //VSize
			,//color
			,//text color
			,0//opacity
			,//text opacity
			,1//image opacity
			]

		//forward & backward buttons
		[NoteIButton, //text
			,"smart_ui_2020/docs/start.psd"//image
			,//pressed
			,backDisabled //disabled
			,186 //HPos
			,835 //VPos
			,35 //HSize
			,35 //VSize
			,//color
			,//text color
			,0 //opacity
			,0//text opacity
			,backOpacity//image opacity
		]
		[NoteIButton, //text
			,"smart_ui_2020/docs/previous.psd" //image
			,//pressed
			,backDisabled //disabled
			,234 //HPos
			,835 //VPos
			,35 //HSize
			,35 //VSize
			,//color
			,//text color
			,0//opacity
			,//text opacity
			,backOpacity //image opacity
		]
		
		[NoteIButton, //text
			,"smart_ui_2020/docs/next.psd" //image
			,//pressed
			,forwardDisabled //disabled
			,380 //HPos
			,835 //VPos
			,35 //HSize
			,35 //VSize
			,//color
			,//text color
			,0//opacity
			,//text opacity
			,forwardOpacity	//image opacity
		]
		[NoteIButton, //text
			,"smart_ui_2020/docs/last.psd" //image
			,//pressed
			,forwardDisabled//disabled
			,428 //HPos
			,835 //VPos
			,35 //HSize
			,35 //VSize
			,//color	
			,//text color	
			,0 //opacity
			,//text opacity	
			,forwardOpacity//image opacity
		]

		//Z4R7 image button
		[NoteIButton, //text
			,"smart_ui_2020/docs/Z4R7.psd" //image
			,//pressed
			,imageDisabled	//disabled?
			,50 //HPos
			,300//VPos
			,500//HSize
			,280//VSize
			,//color
			,//text color
			,0//opacity
			,//text opacity
			,imageShow//image opacity
		]

		//exit button
		[NoteIButton, //text
			,"smart_ui_2020/docs/exit.psd"//image
			,//pressed
			,0//disabled
			,600//HPos
			,15//VPos
			,35//HSize
			,35//VSize
			,//color
			,//text color
			,0 //opacity
			,0//text opacity
			,1//image opacity
		]


		[VarSet,result,[Note,""]]//display & get result

		//process result
		[If, (result>=2)&&(result<=6),//choice results
			[If, result == 2,//Start Page
				[VarSet,pageNo,1]
				[VarSet,backimage,"smart_ui_2020/docs/pg1.psd"]
				[VarSet,backOpacity,0.5]
				[VarSet,backDisabled,1]
				[VarSet,forwardOpacity,1]
				[VarSet,forwardDisabled,0]
			]
			
			[If, result == 3,//Previous
				[Loop,1,
					[If,pageNo == 2,
						[VarDec,pageNo]
						[VarSet,backOpacity,0.5]
						[VarSet,backDisabled,1]
						[VarSet,backimage,"smart_ui_2020/docs/pg1.psd"]
						[LoopExit]
					]
					[If,pageNo == 3,
						[VarDec,pageNo]
						[VarSet,forwardOpacity,1]
						[VarSet,forwardDisabled,0]
						[VarSet,backimage,"smart_ui_2020/docs/pg2.psd"]
						[LoopExit]
					]
					[If,pageNo == 4,
						[VarDec,pageNo]
						[VarSet,forwardOpacity,1]
						[VarSet,forwardDisabled,0]
						[VarSet,backimage,"smart_ui_2020/docs/pg3.psd"]
						[LoopExit]
					]
				]
			]
			
			[If, result == 4,//Next
				[Loop,1,
					[If,pageNo == 1,
						[VarInc,pageNo]
						[VarSet,backOpacity,1]
						[VarSet,backDisabled,0]
						[VarSet,backimage,"smart_ui_2020/docs/pg2.psd"]
						[LoopExit]
					]
					[If,pageNo == 2,
						[VarInc,pageNo]
						[VarSet,forwardOpacity,1]
						[VarSet,forwardDisabled,0]
						[VarSet,backimage,"smart_ui_2020/docs/pg3.psd"]
						[LoopExit]
					]
					[If,pageNo == 3,
						[VarInc,pageNo]
						[VarSet,forwardOpacity,0.5]
						[VarSet,forwardDisabled,1]
						[VarSet,backimage,"smart_ui_2020/docs/pg4.psd"]
						[LoopExit]
					]
				]
			]
			[If, result == 5,//Last Page
				[VarSet,pageNo,4]
				[VarSet,forwardOpacity,0.5]
				[VarSet,forwardDisabled,1]
				[VarSet,backOpacity,1]
				[VarSet,backDisabled,0]
				[VarSet,backimage,"smart_ui_2020/docs/pg4.psd"]
			]
			
			[If, result == 6,//Z4R7 image
				[LoopExit]//result will be handled outside the loop
			]
			,//else exit button or pressing Enter
			
			[LoopExit]//exits loop & interface
			
		]//end if result


	]//end loop
]//end freeze

	[If, result == 6,//Z4R7 image
		[Note,"\Cffa000You pressed the ZBrush 4R7 image button!",,3]
	]
	

]//HelpInterface routine end


// sadly that do not works at all
// Zbrush  popup with a error messageabout 
// being unable to found the routines...
// [RoutineDef, build_routines,
//     [Loop, 50,
//         [RoutineDef, [StrMerge, "button_", n],
//             [VarDef, button_link(50),""]
//             [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
//             [If, DEBUG, [Note, [StrMerge, "button::",n,"::",button_link(n)]]]
//             [IPress, button_link(n)]
//         ]
//     ,n]
// ]
// [RoutineCall, build_routines]


[RoutineDef, button_0,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::1::",button_link(0)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(0)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(0)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(0)],
                [IPress, button_link(0)]
                ,//else
                [Note, "button does not exists"]
            ]        
        ]
        ,//else
        //SUBTOOLS TOOLBAR ONLY
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::1::",button_link(0)],,]]
        
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(0)]]
    ]
,count]

[RoutineDef, button_1,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::2::",button_link(1)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(1)]]
        ]
        // Primitive (5) / GEO (2) Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(1)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(1)],
                [IPress, button_link(1)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::2::",button_link(1)],,]]
        
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(1)]]
    ]
,count]

[RoutineDef, button_2,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::3::",button_link(2)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(2)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(2)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(2)],
                [IPress, button_link(2)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::3::",button_link(2)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(2)]]
    ]
,count]

[RoutineDef, button_3,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::4::",button_link(3)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(3)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(3)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(3)],
                [IPress, button_link(3)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::4::",button_link(3)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var, button_link(3)]]
    ]
,count]

[RoutineDef, button_4,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::5::",button_link(4)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(4)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(4)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(4)],
                [IPress, button_link(4)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::5::",button_link(4)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(4)]]
    ]
,count]

[RoutineDef, button_5,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::6::",button_link(5)],,]]
        
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(5)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(5)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(5)],
                [IPress, button_link(5)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::6::",button_link(5)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(5)]]
    ]
,count]

[RoutineDef, button_6,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::7::",button_link(6)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(6)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(6)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(6)],
                [IPress, button_link(6)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::7::",button_link(6)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(6)]]
    ]
,count]

[RoutineDef, button_7,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::8::",button_link(7)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(7)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(7)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(7)],
                [IPress, button_link(7)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::8::",button_link(7)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(7)]]
    ]
,count]

[RoutineDef, button_8,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::9::",button_link(8)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(8)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(8)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(8)],
                [IPress, button_link(8)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::9::",button_link(8)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(8)]]
    ]
,count]

[RoutineDef, button_9,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::10::",button_link(9)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(9)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(9)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(9)],
                [IPress, button_link(9)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::10::",button_link(9)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(9)]]
    ]
,count]

[RoutineDef, button_10,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::11::",button_link(10)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(10)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(10)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(10)],
                [IPress, button_link(10)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::11::",button_link(10)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(10)]]
    ]
,count]

[RoutineDef, button_11,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::12::",button_link(11)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(11)]]
        ]

        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(11)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(11)],
                [IPress, button_link(11)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::12::",button_link(11)],,]]
         //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(11)]]
    ]
,count]

[RoutineDef, button_12,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::13::",button_link(12)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(12)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(12)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(12)],
                [IPress, button_link(12)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::13::",button_link(12)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(12)]]
    ]
,count]

[RoutineDef, button_13,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::14::",button_link(13)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(13)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(13)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(13)],
                [IPress, button_link(13)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::14::",button_link(13)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(13)]]
    ]
,count]

[RoutineDef, button_14,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::15::",button_link(14)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(14)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(14)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(14)],
                [IPress, button_link(14)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::15::",button_link(14)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(14)]]
    ]
,count]

[RoutineDef, button_15,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::16::",button_link(15)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(15)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(15)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(15)],
                [IPress, button_link(15)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::16::",button_link(15)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(15)]]
    ]
,count]

[RoutineDef, button_16,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::17::",button_link(16)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(16)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(16)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(16)],
                [IPress, button_link(16)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::17::",button_link(16)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(16)]]
    ]
,count]

[RoutineDef, button_17,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::18::",button_link(17)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(17)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(17)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(17)],
                [IPress, button_link(17)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::18::",button_link(17)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(17)]]
    ]
,count]

[RoutineDef, button_18,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::19::",button_link(18)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(18)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(18)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(18)],
                [IPress, button_link(18)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::19::",button_link(18)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(18)]]
    ]
,count]

[RoutineDef, button_19,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::20::",button_link(19)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(19)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(19)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(19)],
                [IPress, button_link(19)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::20::",button_link(19)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(19)]]
    ]
,count]

[RoutineDef, button_20,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::21::",button_link(20)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(20)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(20)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(20)],
                [IPress, button_link(20)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::21::",button_link(20)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(20)]]
    ]
,count]

[RoutineDef, button_21,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::22::",button_link(21)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(21)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(21)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(21)],
                [IPress, button_link(21)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::22::",button_link(21)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(21)]]
    ]
,count]

[RoutineDef, button_22,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::23::",button_link(22)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(22)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(22)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(22)],
                [IPress, button_link(22)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::23::",button_link(22)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(22)]]
    ]
,count]

[RoutineDef, button_23,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::24::",button_link(23)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(3)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(23)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(23)],
                [IPress, button_link(23)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::24::",button_link(23)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(23)]]
    ]
,count]

[RoutineDef, button_24,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::25::",button_link(24)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(24)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(24)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(24)],
                [IPress, button_link(24)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::25::",button_link(24)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(24)]]
    ]
,count]

[RoutineDef, button_25,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::26::",button_link(25)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(25)]]
        ]
        //Primitive Toolbar
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(25)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(25)],
                [IPress, button_link(25)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::26::",button_link(25)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(25)]]
    ]
,count]

[RoutineDef, button_26,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::27::",button_link(26)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(26)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(26)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(26)],
                [IPress, button_link(26)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::27::",button_link(26)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(26)]]
    ]
,count]

[RoutineDef, button_27,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::28::",button_link(27)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(27)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(27)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(27)],
                [IPress, button_link(27)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::28::",button_link(27)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(27)]]
    ]
,count]

[RoutineDef, button_28,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::29::",button_link(28)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(28)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(28)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(28)],
                [IPress, button_link(28)]
                ,//else
                [Note, "primitive parameter does not exists."]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::29::",button_link(28)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(28)]]
    ]
,count]

[RoutineDef, button_29,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::42::",button_link(29)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(29)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(29)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(29)],
                [IPress, button_link(29)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::42::",button_link(29)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(29)]]
    ]
,count]




[RoutineDef, button_30,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::31::",button_link(30)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(30)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(30)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(30)],
                [IPress, button_link(30)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(30),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::21::",button_link(30)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(30)]]
    ]
,count]

[RoutineDef, button_31,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::32::",button_link(31)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(31)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(31)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(31)],
                [IPress, button_link(31)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::32::",button_link(31)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(31)]]
    ]
,count]

[RoutineDef, button_32,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::33::",button_link(32)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(32)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(32)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(32)],
                [IPress, button_link(32)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::33::",button_link(32)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(32)]]
    ]
,count]

[RoutineDef, button_33,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::24::",button_link(33)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(33)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(33)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(33)],
                [IPress, button_link(33)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::24::",button_link(33)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(33)]]
    ]
,count]

[RoutineDef, button_34,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::35::",button_link(34)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(34)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(34)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(34)],
                [IPress, button_link(34)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::35::",button_link(34)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(34)]]
    ]
,count]

[RoutineDef, button_35,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::36::",button_link(35)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(35)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(35)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(35)],
                [IPress, button_link(35)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::36::",button_link(35)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(35)]]
    ]
,count]

[RoutineDef, button_36,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::37::",button_link(36)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(36)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(36)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(36)],
                [IPress, button_link(36)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::37::",button_link(36)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(36)]]
    ]
,count]

[RoutineDef, button_37,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::38::",button_link(37)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(37)]]
        ]
        // Primitive / GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(37)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(37)],
                [IPress, button_link(37)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::38::",button_link(37)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(37)]]
    ]
,count]

[RoutineDef, button_38,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::39::",button_link(38)],,]]
        // ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(38)]]
        ]
        // Primitive // GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(38)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(38)],
                [IPress, button_link(38)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::39::",button_link(38)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(38)]]
    ]
,count]

[RoutineDef, button_39,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::40::",button_link(39)],,]]
        // ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(39)]]
        ]
        // Primitive // GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(39)]]
            ,// else any other TOOLBARS
            [If, [IExists, button_link(39)],
                [IPress, button_link(39)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::40::",button_link(39)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(39)]]
    ]
,count]

[RoutineDef, button_40,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::41::",button_link(40)],,]]
        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(40)]]
        ]
        // Primitive // GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(40)]]
            ,//else
            [If, [IExists, button_link(40)],
                [IPress, button_link(40)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::41::",button_link(40)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(40)]]
    ]
,count]

[RoutineDef, button_41,
    [If, TOOLBAR != 6,
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/link.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::42::",button_link(41)],,]]

        //ZMODELER TOOLBAR
        [If, TOOLBAR == 8,
            [RoutineCall, get_zmodeler_brush, [Var, button_link(41)]]
        ]
        
        // Primitive // GEO Toolbars
        [If, (TOOLBAR == 5) || (TOOLBAR == 2),
            [RoutineCall, apply_parameters, [Var, button_link(41)]]
            ,//else
            [If, [IExists, button_link(41)],
                [IPress, button_link(41)]
                ,//else
                [Note, "button does not exists"]
            ]
        ]
        ,//else is SUBTOOL TOOBAR
        [VarDef, button_link(42),""]
        [VarLoad, button_link, "smart_ui_2020/data/subtools.zvr"]
        [If, DEBUG, [Note, [StrMerge, "button::42::",button_link(41)],,]]
        //We first need to move the subtool scrollbar to be allowed to ipress a subtool by his name
        [RoutineCall, select_subtool_by_title, [Var,button_link(41)]]
    ]
,count]

[RoutineDef, EnableSwitchStates,

    [IEnable, "zplugin:Smart UI:Brushes Options:a.Left"]
    [IEnable, "zplugin:Smart UI:Brushes Options:a.Right"]
    [IEnable, "zplugin:Smart UI:Brushes Options:a.Top"]
    [IEnable, "zplugin:Smart UI:Brushes Options:a.Bottom"]
    [IEnable, "zplugin:Smart UI:Brushes Options:a.Icon"]
    [IEnable, "zplugin:Smart UI:Brushes Options:a.Text"]

    [IEnable, "zplugin:Smart UI:Alphas Options:b.Left"]
    [IEnable, "zplugin:Smart UI:Alphas Options:b.Right"]
    [IEnable, "zplugin:Smart UI:Alphas Options:b.Top"]
    [IEnable, "zplugin:Smart UI:Alphas Options:b.Bottom"]
    [IEnable, "Zplugin:Smart UI:Alphas Options:b.Icon"]
    [IEnable, "Zplugin:Smart UI:Alphas Options:b.Text"]

    [IEnable, "zplugin:Smart UI:Geometry Options:c.Left"]
    [IEnable, "zplugin:Smart UI:Geometry Options:c.Right"]
    [IEnable, "zplugin:Smart UI:Geometry Options:c.Top"]
    [IEnable, "zplugin:Smart UI:Geometry Options:c.Bottom"]
    [IEnable, "Zplugin:Smart UI:Geometry Options:c.Icon"]
    [IEnable, "Zplugin:Smart UI:Geometry Options:c.Text"]

    [IEnable, "zplugin:Smart UI:Materials Options:d.Left"]
    [IEnable, "zplugin:Smart UI:Materials Options:d.Right"]
    [IEnable, "zplugin:Smart UI:Materials Options:d.Top"]
    [IEnable, "zplugin:Smart UI:Materials Options:d.Bottom"]
    [IEnable, "Zplugin:Smart UI:Materials Options:d.Icon"]
    [IEnable, "Zplugin:Smart UI:Materials Options:d.Text"]

    [IEnable, "zplugin:Smart UI:Macros Options:e.Left"]
    [IEnable, "zplugin:Smart UI:Macros Options:e.Right"]
    [IEnable, "zplugin:Smart UI:Macros Options:e.Top"]
    [IEnable, "zplugin:Smart UI:Macros Options:e.Bottom"]
    [IEnable, "Zplugin:Smart UI:Macros Options:e.Icon"]
    [IEnable, "Zplugin:Smart UI:Macros Options:e.Text"]

    [IEnable, "zplugin:Smart UI:Primitives Options:f.Left"]
    [IEnable, "zplugin:Smart UI:Primitives Options:f.Right"]
    [IEnable, "zplugin:Smart UI:Primitives Options:f.Top"]
    [IEnable, "zplugin:Smart UI:Primitives Options:f.Bottom"]
    [IEnable, "Zplugin:Smart UI:Primitives Options:f.Icon"]
    [IEnable, "Zplugin:Smart UI:Primitives Options:f.Text"]
    
    [IEnable, "zplugin:Smart UI:Subtools Options:g.Left"]
    [IEnable, "zplugin:Smart UI:Subtools Options:g.Right"]
    [IEnable, "zplugin:Smart UI:Subtools Options:g.Top"]
    [IEnable, "zplugin:Smart UI:Subtools Options:g.Bottom"]
    [IEnable, "Zplugin:Smart UI:Subtools Options:g.Icon"]
    [IEnable, "Zplugin:Smart UI:Subtools Options:g.Text"]
    
    [IEnable, "zplugin:Smart UI:View Options:h.Left"]
    [IEnable, "zplugin:Smart UI:View Options:h.Right"]
    [IEnable, "zplugin:Smart UI:View Options:h.Top"]
    [IEnable, "zplugin:Smart UI:View Options:h.Bottom"]
    [IEnable, "Zplugin:Smart UI:View Options:h.Icon"]
    [IEnable, "Zplugin:Smart UI:View Options:h.Text"]

    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Left"]
    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Right"]
    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Top"]
    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Bottom"]
    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Icon"]
    [IEnable, "zplugin:Smart UI:ZModeler Options:i.Text"]

    [IEnable, "zplugin:Smart UI:Global Settings:Adjust Button Width"]
    [IEnable, "zplugin:Smart UI:Global Settings:Disable Quick Exit"]

]
[RoutineDef, developer_mode,

    [ISet, "zplugin:Smart UI:Geometry Options:c.Icon", 0]
    [ISet, "zplugin:Smart UI:Geometry Options:c.text", 1]
    [ILock, "zplugin:Smart UI:Geometry Options:c.Icon"]

    [ISet, "zplugin:Smart UI:Macros Options:e.Icon", 0]
    [ISet, "zplugin:Smart UI:Macros Options:e.text", 1]
    [ILock, "zplugin:Smart UI:Macros Options:e.Icon"]
    
    [ISet, "zplugin:Smart UI:Primitives Options:f.Icon", 0]
    [ISet, "zplugin:Smart UI:Primitives Options:f.text", 1]
    [ILock, "zplugin:Smart UI:Primitives Options:f.Icon"]

    [ISet, "zplugin:Smart UI:Subtools Options:g.Icon", 0]
    [ISet, "zplugin:Smart UI:Subtools Options:g.text", 1]
    [ILock, "zplugin:Smart UI:Subtools Options:g.Icon"]

    [ISet, "zplugin:Smart UI:ZModeler Options:i.Icon", 0]
    [ISet, "zplugin:Smart UI:ZModeler Options:i.Text", 1]
    [ILock, "zplugin:Smart UI:ZModeler Options:i.Icon"]

    [IHide, "Zplugin:Smart UI:Display"]
    [IHide, "Zplugin:Smart UI:View Options"]
]


[RoutineCall, Startup]
// [RoutineCall, read_settings, "Smart_UI_2020/data/left-sidebar.txt"]

[ISubPalette, "zplugin:Smart UI"]
[ISubPalette, "zplugin:Smart UI:About",2]
[IButton, "Zplugin:Smart UI:About:Smart UI Logo", "Read the doc",
    [RoutineCall,HelpInterface]
,,1,,"Smart_UI_2020\icons\smart_ui_logo2_h.psd",.3]

[ISubPalette, "zplugin:Smart UI:ToolBars",2]
[IButton, "zplugin:Smart UI:ToolBars:Brush", "Show Toolbar.", 
    
	[VarSet, TOOLBAR, 0]
    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Bottom"],
        [VarSet, POSITION, 3]
    ]
	
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/brush.txt"]]
    [RoutineCall, read_settings, file]

    [VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Icon"],
        [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Left"] || [IGet, "zplugin:Smart UI:Brushes Options:a.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Text"],
        [If, [IGet, "zplugin:Smart UI:Brushes Options:a.Left"] || [IGet, "zplugin:Smart UI:Brushes Options:a.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Brushes Options:a.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]

,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:Alpha", "Alpha Toolbar.", 
	[VarSet, TOOLBAR, 1]
    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Bottom"],
        [VarSet, POSITION, 3]
    ]

	[VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/alpha.txt"]]
    [RoutineCall, read_settings, file]
	
    [VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Icon"],
        [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Left"] || [IGet, "zplugin:Smart UI:Alphas Options:b.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Text"],
        [If, [IGet, "zplugin:Smart UI:Alphas Options:b.Left"] || [IGet, "zplugin:Smart UI:Alphas Options:b.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Alphas Options:b.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]

,,1/2,,"",]

[IButton, "zplugin:Smart UI:ToolBars:Geometry", "Show Toolbar.", 
	[VarSet, TOOLBAR, 2]
    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/geometry.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Icon"],
        [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Left"] || [IGet, "zplugin:Smart UI:Geometry Options:c.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Text"],
        [If, [IGet, "zplugin:Smart UI:Geometry Options:c.Left"] || [IGet, "zplugin:Smart UI:Geometry Options:c.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Geometry Options:c.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]

,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:Material", "Show Toolbar.", 
	[VarSet, TOOLBAR, 3]
    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/material.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Icon"],
        [If, [IGet, "zplugin:Smart UI:Materials Options:d.Left"] || [IGet, "zplugin:Smart UI:Materials Options:d.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Materials Options:d.Text"],
        [If, [IGet, "zplugin:Smart UI:Materials Options:d.Left"] || [IGet, "zplugin:Smart UI:Materials Options:d.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Materials Options:d.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]
,,1/2,,"",]

[IButton, "zplugin:Smart UI:ToolBars:Macro", "Show Toolbar.", 
	[VarSet, TOOLBAR, 4]
    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/macro.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Icon"],
        [If, [IGet, "zplugin:Smart UI:Macros Options:e.Left"] || [IGet, "zplugin:Smart UI:Macros Options:e.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Macros Options:e.Text"],
        [If, [IGet, "zplugin:Smart UI:Macros Options:e.Left"] || [IGet, "zplugin:Smart UI:Macros Options:e.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Macros Options:e.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]
,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:Primitives", "Show Toolbar.", 
	[VarSet, TOOLBAR, 5]
    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/primitives.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Icon"],
        [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Left"] || [IGet, "zplugin:Smart UI:Primitives Options:f.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Text"],
        [If, [IGet, "zplugin:Smart UI:Primitives Options:f.Left"] || [IGet, "zplugin:Smart UI:Primitives Options:f.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:Primitives Options:f.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]
,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:Subtools", "Show Toolbar.", 
	[VarSet, TOOLBAR, 6]
    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Bottom"],
        [VarSet, POSITION, 3]
    ]
    
    [VarSet, count, [SubToolGetCount]]
    [If, count >= 42,
            [VarSet, count, 42]
    ]
// disabled for now
// it might be beter to check the varsize
    // Let check if the  current tool and the number of subtool are the same that previous runtime
    [VarDef, subtool_list(2), -1]
    [If, [FileExists, "smart_ui_2020/data/subtools_history.zvr"],
        [VarLoad, subtool_list, "smart_ui_2020/data/subtools_history.zvr"]
        
        [FileDelete, "smart_ui_2020/data/subtools_history.zvr"]
        [If, DEBUG, [Note, "Delete history\n",,-1]]
        ,//else
        //the save it to disk
        [If, DEBUG, [Note, "first launch",,-1]]
        [VarSet, subtool_list(0), [IGet, "Tool:Item Info"]]
        [VarSet, subtool_list(1), [SubToolGetCount]]
    ]
    // then Save the var list after the compare.

    // store the current tool ID
    [VarSet, stID, [IGet, "Tool:Item Info"]]

    [If, (stID == [Var, subtool_list(0)]) && (count == [Var, subtool_list(1)]),
        
        [If, DEBUG, [Note, "same tool/subtool count\n",,-1]]

        [VarSet, subtool_list(0), [IGet, "Tool:Item Info"]]
        [VarSet, subtool_list(1), [SubToolGetCount]]
        ,//else
        [If, DEBUG, [Note, "not same tool/subtool count\n",,-1]]

        [VarSet, subtool_list(0), [IGet, "Tool:Item Info"]]
        [VarSet, subtool_list(1), [SubToolGetCount]]
        [If, count >= 42,
            [VarSet, count, 42]
            [RoutineCall, get_subtool_settings, 42]
            ,//else
            [RoutineCall, get_subtool_settings, count]
        ]
        
    ]
    [VarSave, subtool_list, "smart_ui_2020/data/subtools_history.zvr"]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Icon"],
        [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Left"] || [IGet, "zplugin:Smart UI:Subtools Options:g.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Text"],
        [If, [IGet, "zplugin:Smart UI:Subtools Options:g.Left"] || [IGet, "zplugin:Smart UI:Subtools Options:g.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	//[VarSet, count, [IGet, "zplugin:Smart UI:View Options:h.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]

    // [VarSet, TOOLBAR, -1]
,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:Display", "Show Display Toolbar.", 
	[VarSet, TOOLBAR, 7]
    [If, [IGet, "zplugin:Smart UI:View Options:h.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:View Options:h.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:View Options:h.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:View Options:h.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/display.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:View Options:h.Icon"],
        [If, [IGet, "zplugin:Smart UI:View Options:h.Left"] || [IGet, "zplugin:Smart UI:View Options:h.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:View Options:h.Text"],
        [If, [IGet, "zplugin:Smart UI:View Options:h.Left"] || [IGet, "zplugin:Smart UI:View Options:h.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:View Options:h.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]
,,1/2,,"",]


[IButton, "zplugin:Smart UI:ToolBars:ZModeler", "Show Toolbar.", 
	[VarSet, TOOLBAR, 8]
    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Left"],
        [VarSet, POSITION, 0]
    ]
    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Right"],
        [VarSet, POSITION, 1]
    ]
    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Top"],
        [VarSet, POSITION, 2]
    ]
    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Bottom"],
        [VarSet, POSITION, 3]
    ]
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020/config/zmodeler.txt"]]
    [RoutineCall, read_settings, file]

	[VarSet, iconSize, [IGet, "zplugin:Smart UI:Global Settings:Icon Size"]]
    [VarSet, iconMargin, [IGet, "zplugin:Smart UI:Global Settings:button margin"]]

    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Icon"],
        [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Left"] || [IGet, "zplugin:Smart UI:ZModeler Options:i.Right"],
            [VarSet, height, iconSize]
            [VarSet, width, iconSize]
            ,//else
            [VarSet, height, 50]
            [VarSet, width, 50]
        ]
    ]
    [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Text"],
        [If, [IGet, "zplugin:Smart UI:ZModeler Options:i.Left"] || [IGet, "zplugin:Smart UI:ZModeler Options:i.Right"],
            [VarSet, height, [IGet, "zplugin:Smart UI:Global Settings:Button Height"]]
            [VarSet, width, 150]
        ]
    ]
	[VarSet, count, [IGet, "zplugin:Smart UI:ZModeler Options:i.Items Count"]]
    [RoutineCall, preset_interface, count, width, height, iconMargin]
    [VarSet, TOOLBAR, -1]
,,1/2,,"",]




[ISubPalette, "zplugin:Smart UI:Brushes Options"]
// [IButton, "zplugin:Smart UI:Brushes Options:a.ToolBar Settings","",,1,1,,,25]


[ISlider, "zplugin:Smart UI:Brushes Options:a.Items Count", [MVarGet, nk_sui_uiSwitchesState, 0], 1, 1,42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 0, [IGet,"zplugin:Smart UI:Brushes Options:a.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Brushes Options:a.Icon", [MVarGet, nk_sui_uiSwitchesState, 5], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,5,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Brushes Options:a.Text"]
    [MVarSet,nk_sui_uiSwitchesState,5,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Brushes Options:a.Text", [MVarGet, nk_sui_uiSwitchesState, 6], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,6,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Brushes Options:a.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,6,0]
	[RoutineCall,UIStateToFile]
,,1/2]

// [IButton, "zplugin:Smart UI:Brushes Options:a.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Brushes Options:a.Left", [MVarGet, nk_sui_uiSwitchesState, 1], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Right"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Top"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,1,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,1,0]
	[RoutineCall,UIStateToFile]
]


[ISwitch, "zplugin:Smart UI:Brushes Options:a.Right", [MVarGet, nk_sui_uiSwitchesState, 2], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Left"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Top"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,2,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,2,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Brushes Options:a.Top", [MVarGet, nk_sui_uiSwitchesState, 3], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Right"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Left"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,3,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,3,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Brushes Options:a.Bottom", [MVarGet, nk_sui_uiSwitchesState, 4], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Right"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Top"]
    [IUnPress, "zplugin:Smart UI:Brushes Options:a.Left"]
    [MVarSet,nk_sui_uiSwitchesState,4,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,4,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISlider, "zplugin:Smart UI:Brushes Options:a.Button Opacity", [MVarGet, nk_sui_uiSwitchesState, 70], 0.1, 0,1, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 70, [IGet,"zplugin:Smart UI:Brushes Options:a.button opacity"]]
	[RoutineCall,UIStateToFile]
,,1]

[IButton, "zplugin:Smart UI:Brushes Options:a.Customize Toolbar", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\brush.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]
,,1]




[ISubPalette, "zplugin:Smart UI:Alphas Options"]
// [IButton, "zplugin:Smart UI:Alphas Options:b.ToolBar Settings","",,1,1,,,25]

[ISlider, "zplugin:Smart UI:Alphas Options:b.Items Count", [MVarGet, nk_sui_uiSwitchesState, 7], 1, 1, 42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 7, [IGet,"zplugin:Smart UI:Alphas Options:b.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Alphas Options:b.Icon", [MVarGet, nk_sui_uiSwitchesState, 12], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,12,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Alphas Options:b.Text"]
    [MVarSet,nk_sui_uiSwitchesState,12,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Alphas Options:b.Text", [MVarGet, nk_sui_uiSwitchesState, 13], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,13,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Brushes Options:b.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,13,0]
	[RoutineCall,UIStateToFile]
,,1/2]

// [IButton, "zplugin:Smart UI:Alphas Options:b.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Alphas Options:b.Left", [MVarGet, nk_sui_uiSwitchesState, 8], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Right"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Top"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,8,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,8,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Alphas Options:b.Right", [MVarGet, nk_sui_uiSwitchesState, 9], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Left"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Top"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,9,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,9,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Alphas Options:b.Top", [MVarGet, nk_sui_uiSwitchesState, 10], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Right"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Left"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,10,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,10,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Alphas Options:b.Bottom", [MVarGet, nk_sui_uiSwitchesState, 11], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Right"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Top"]
    [IUnPress, "zplugin:Smart UI:Alphas Options:b.Left"]
    [MVarSet,nk_sui_uiSwitchesState,11,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,11,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISlider, "zplugin:Smart UI:Alphas Options:b.Button Opacity", [MVarGet, nk_sui_uiSwitchesState, 71], 0.1, 0,1, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 71, [IGet,"zplugin:Smart UI:Alphas Options:b.button opacity"]]
	[RoutineCall,UIStateToFile]
,,1]


[IButton, "zplugin:Smart UI:Alphas Options:b.Customize Toolbar", "open the configuaration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\alpha.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]



[ISubPalette, "zplugin:Smart UI:Geometry Options"]
// [IButton, "zplugin:Smart UI:Geometry Options:c.ToolBar Settings","",,1,1,,,25]

[ISlider, "zplugin:Smart UI:Geometry Options:c.Items Count", [MVarGet, nk_sui_uiSwitchesState, 14], 1, 1,42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 14, [IGet,"zplugin:Smart UI:Geometry Options:c.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Geometry Options:c.Icon", [MVarGet, nk_sui_uiSwitchesState, 19], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,19,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Geometry Options:c.Text"]
    [MVarSet,nk_sui_uiSwitchesState,19,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Geometry Options:c.Text", [MVarGet, nk_sui_uiSwitchesState, 20], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,20,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Geometry Options:c.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,20,0]
	[RoutineCall,UIStateToFile]
,,1/2]

// [IButton, "zplugin:Smart UI:Geometry Options:c.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Geometry Options:c.Left", [MVarGet, nk_sui_uiSwitchesState, 15], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Right"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Top"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,15,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,15,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:Geometry Options:c.Right", [MVarGet, nk_sui_uiSwitchesState, 16], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Left"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Top"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,16,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,16,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Geometry Options:c.Top", [MVarGet, nk_sui_uiSwitchesState, 17], "Show on Top side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Right"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Left"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,17,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,17,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Geometry Options:c.Bottom", [MVarGet, nk_sui_uiSwitchesState, 18], "Show on Bottom side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Right"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Top"]
    [IUnPress, "zplugin:Smart UI:Geometry Options:c.Left"]
    [MVarSet,nk_sui_uiSwitchesState,18,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,18,0]
	[RoutineCall,UIStateToFile]
,,1/4]



[IButton, "zplugin:Smart UI:Geometry Options:c.Customize Toolbar", "open the configuaration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\geometry.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]



[ISubPalette, "zplugin:Smart UI:Materials Options"]
// [IButton, "zplugin:Smart UI:Materials Options:d.ToolBar Settings","",,1,1,,,25]


[ISlider, "zplugin:Smart UI:Materials Options:d.Items Count", [MVarGet, nk_sui_uiSwitchesState, 21], 1, 1,42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 21, [IGet,"zplugin:Smart UI:Materials Options:d.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]


[ISwitch, "zplugin:Smart UI:Materials Options:d.Icon", [MVarGet, nk_sui_uiSwitchesState, 26], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,26,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Materials Options:d.Text"]
    [MVarSet,nk_sui_uiSwitchesState,26,0]
	[RoutineCall,UIStateToFile]
,,1/2]

[ISwitch, "zplugin:Smart UI:Materials Options:d.Text", [MVarGet, nk_sui_uiSwitchesState, 27], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,27,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Materials Options:d.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,27,0]
	[RoutineCall,UIStateToFile]
,,1/2]

// [IButton, "zplugin:Smart UI:Materials Options:d.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Materials Options:d.Left", [MVarGet, nk_sui_uiSwitchesState, 22], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Right"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Top"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,22,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,22,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:Materials Options:d.Right", [MVarGet, nk_sui_uiSwitchesState, 23], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Left"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Top"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,23,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,23,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Materials Options:d.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 24]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Right"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Left"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,24,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,24,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Materials Options:d.Bottom", [MVarGet, nk_sui_uiSwitchesState, 25], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Right"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Top"]
    [IUnPress, "zplugin:Smart UI:Materials Options:d.Left"]
    [MVarSet,nk_sui_uiSwitchesState,25,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,25,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISlider, "zplugin:Smart UI:Materials Options:d.Button Opacity", [MVarGet, nk_sui_uiSwitchesState, 70], 0.1, 0,1, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 72, [IGet,"zplugin:Smart UI:Materials Options:d.button opacity"]]
	[RoutineCall,UIStateToFile]
,,1]

[IButton, "zplugin:Smart UI:Materials Options:d.Customize Toolbar", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\material.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]



[ISubPalette, "zplugin:Smart UI:Macros Options"]
[IButton, "zplugin:Smart UI:Macros Options:e.ToolBar Settings","",,1,1,,,25]



[ISlider, "zplugin:Smart UI:Macros Options:e.Items Count", [MVarGet, nk_sui_uiSwitchesState, 28], 1, 1,42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 28, [IGet,"zplugin:Smart UI:Macros Options:e.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Macros Options:e.Icon", [MVarGet, nk_sui_uiSwitchesState, 33], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,33,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Macros Options:e.Text"]
    [MVarSet,nk_sui_uiSwitchesState,33,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Macros Options:e.Text", [MVarGet, nk_sui_uiSwitchesState, 34], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,34,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Macros Options:e.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,34,0]
	[RoutineCall,UIStateToFile]
,,1/2]


[IButton, "zplugin:Smart UI:Macros Options:e.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Macros Options:e.Left", [MVarGet, nk_sui_uiSwitchesState, 29], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Right"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Top"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,29,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,29,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:Macros Options:e.Right", [MVarGet, nk_sui_uiSwitchesState, 30], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Left"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Top"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,30,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,30,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Macros Options:e.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 31]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Right"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Left"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,31,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,31,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Macros Options:e.Bottom", [MVarGet, nk_sui_uiSwitchesState, 32], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Right"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Top"]
    [IUnPress, "zplugin:Smart UI:Macros Options:e.Left"]
    [MVarSet,nk_sui_uiSwitchesState,32,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,32,0]
	[RoutineCall,UIStateToFile]
,,1/4]


[IButton, "zplugin:Smart UI:Macros Options:e.Customize Toolbar", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\macro.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]



[ISubPalette, "zplugin:Smart UI:Primitives Options"]
// [IButton, "zplugin:Smart UI:Primitives Options:f.ToolBar Settings","",,1,1,,,25]


[ISlider, "zplugin:Smart UI:Primitives Options:f.Items Count", [MVarGet, nk_sui_uiSwitchesState, 35], 1, 1,42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 35, [IGet,"zplugin:Smart UI:Primitives Options:f.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]


[ISwitch, "zplugin:Smart UI:Primitives Options:f.Icon", [MVarGet, nk_sui_uiSwitchesState, 40], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,40,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Primitives Options:f.Text"]
    [MVarSet,nk_sui_uiSwitchesState,40,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Primitives Options:f.Text", [MVarGet, nk_sui_uiSwitchesState, 41], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,41,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Primitives Options:f.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,41,0]
	[RoutineCall,UIStateToFile]
,,1/2]



// [IButton, "zplugin:Smart UI:Primitives Options:f.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:Primitives Options:f.Left", [MVarGet, nk_sui_uiSwitchesState, 36], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Right"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Top"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,36,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,36,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:Primitives Options:f.Right", [MVarGet, nk_sui_uiSwitchesState, 37], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Left"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Top"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,37,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,37,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Primitives Options:f.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 38]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Right"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Left"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,38,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,38,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Primitives Options:f.Bottom", [MVarGet, nk_sui_uiSwitchesState, 39], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Right"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Top"]
    [IUnPress, "zplugin:Smart UI:Primitives Options:f.Left"]
    [MVarSet,nk_sui_uiSwitchesState,39,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,39,0]
	[RoutineCall,UIStateToFile]
,,1/4]


[IButton, "zplugin:Smart UI:Primitives Options:f.Config File", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\primitives.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]


[ISubPalette, "zplugin:Smart UI:Subtools Options"]


[ISwitch, "zplugin:Smart UI:Subtools Options:g.Icon", [MVarGet, nk_sui_uiSwitchesState, 46], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,46,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Subtools Options:g.Text"]
    [MVarSet,nk_sui_uiSwitchesState,46,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:Subtools Options:g.Text", [MVarGet, nk_sui_uiSwitchesState, 47], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,47,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:Subtools Options:g.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,47,0]
	[RoutineCall,UIStateToFile]
,,1/2]

// [IButton, "zplugin:Smart UI:Subtools Options:g.Toolbar Position","",,1,1,,,25]



[ISwitch, "zplugin:Smart UI:Subtools Options:g.Left", [MVarGet, nk_sui_uiSwitchesState, 42], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Right"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Top"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,42,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,42,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:Subtools Options:g.Right", [MVarGet, nk_sui_uiSwitchesState, 43], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Left"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Top"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,43,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,43,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Subtools Options:g.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 44]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Right"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Left"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,44,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,44,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:Subtools Options:g.Bottom", [MVarGet, nk_sui_uiSwitchesState, 45], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Right"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Top"]
    [IUnPress, "zplugin:Smart UI:Subtools Options:g.Left"]
    [MVarSet,nk_sui_uiSwitchesState,45,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,45,0]
	[RoutineCall,UIStateToFile]
,,1/4]




[ISubPalette, "zplugin:Smart UI:View Options"]


// [IButton, "zplugin:Smart UI:View Options:h.ToolBar Settings","",,1,1,,,25]

[ISlider, "zplugin:Smart UI:View Options:h.Items Count", [MVarGet, nk_sui_uiSwitchesState, 48], 1, 1, 42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 48, [IGet,"zplugin:Smart UI:View Options:h.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:View Options:h.Icon", [MVarGet, nk_sui_uiSwitchesState, 53], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:View Options:h.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,53,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:View Options:h.Text"]
    [MVarSet,nk_sui_uiSwitchesState,53,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:View Options:h.Text", [MVarGet, nk_sui_uiSwitchesState, 54], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:View Options:h.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,54,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:View Options:h.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,54,0]
	[RoutineCall,UIStateToFile]
,,1/2]


// [IButton, "zplugin:Smart UI:View Options:h.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:View Options:h.Left", [MVarGet, nk_sui_uiSwitchesState, 49], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:View Options:h.Right"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Top"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,49,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,49,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:View Options:h.Right", [MVarGet, nk_sui_uiSwitchesState, 50], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:View Options:h.Left"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Top"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,50,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,50,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:View Options:h.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 51]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:View Options:h.Right"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Left"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,51,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,51,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:View Options:h.Bottom", [MVarGet, nk_sui_uiSwitchesState, 52], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:View Options:h.Right"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Top"]
    [IUnPress, "zplugin:Smart UI:View Options:h.Left"]
    [MVarSet,nk_sui_uiSwitchesState,52,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,52,0]
	[RoutineCall,UIStateToFile]
,,1/4]


[IButton, "zplugin:Smart UI:View Options:h.Customize Toolbar", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\display.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]



[ISubPalette, "zplugin:Smart UI:ZModeler Options"]

// [IButton, "zplugin:Smart UI:ZModeler Options:i.ToolBar Settings","",,1,1,,,25]

[ISlider, "zplugin:Smart UI:ZModeler Options:i.Items Count", [MVarGet, nk_sui_uiSwitchesState, 63], 1, 1, 42, "Items count",
    [MVarSet, nk_sui_uiSwitchesState, 63, [IGet,"zplugin:Smart UI:ZModeler Options:i.Items Count"]]
	[RoutineCall,UIStateToFile]
,,1]



[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Icon", [MVarGet, nk_sui_uiSwitchesState, 68], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Text"]    
    [MVarSet,nk_sui_uiSwitchesState,68,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:ZModeler Options:i.Text"]
    [MVarSet,nk_sui_uiSwitchesState,68,0]
	[RoutineCall,UIStateToFile]
,,1/2]
[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Text", [MVarGet, nk_sui_uiSwitchesState, 69], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,69,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [IPress, "zplugin:Smart UI:ZModeler Options:i.Icon"]
    [MVarSet,nk_sui_uiSwitchesState,69,0]
	[RoutineCall,UIStateToFile]
,,1/2]



// [IButton, "zplugin:Smart UI:ZModeler Options:i.Toolbar Position","",,1,1,,,25]

[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Left", [MVarGet, nk_sui_uiSwitchesState, 64], "Show on Left side of the canvas.",
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Right"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Top"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,64,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,64,0]
	[RoutineCall,UIStateToFile]
,,1/4]
[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Right", [MVarGet, nk_sui_uiSwitchesState, 65], "Show on Right side of the canvas.",
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Left"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Top"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,65,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,65,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Top"
    , [MVarGet, nk_sui_uiSwitchesState, 66]
    , "Show on Top side of the canvas."
    ,//pressed
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Right"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Left"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Bottom"]
    [MVarSet,nk_sui_uiSwitchesState,66,1]
	[RoutineCall,UIStateToFile]
    ,//unpressed
    [MVarSet,nk_sui_uiSwitchesState,66,0]
	[RoutineCall,UIStateToFile]
,,1/4]

[ISwitch, "zplugin:Smart UI:ZModeler Options:i.Bottom", [MVarGet, nk_sui_uiSwitchesState, 67], "Show on Bottom side of the canvas.",
    
    
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Right"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Top"]
    [IUnPress, "zplugin:Smart UI:ZModeler Options:i.Left"]
    [MVarSet,nk_sui_uiSwitchesState,67,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,67,0]
	[RoutineCall,UIStateToFile]
,,1/4]


[IButton, "zplugin:Smart UI:ZModeler Options:i.Customize Toolbar", "open the configuration file in text editor.",
    [VarSet, file, [FileNameResolvePath,"Smart_UI_2020\config\ZModeler.txt"]]
    [ShellExecute, [StrMerge, "start notepad ", quote, file ,quote]]

,,1]





[ISubPalette, "zplugin:Smart UI:Global Settings"]

[ISlider, "zplugin:Smart UI:Global Settings:Button Opacity", [MVarGet,nk_sui_uiSwitchesState,55], 0.1, 0, 1, "",
    [MVarSet, nk_sui_uiSwitchesState, 55, [IGet,"zplugin:Smart UI:Global Settings:Button opacity"]]
	[RoutineCall,UIStateToFile]
,,1]
[ISlider, "zplugin:Smart UI:Global Settings:Image Opacity", [MVarGet,nk_sui_uiSwitchesState,56], 0.1, 0, 1, "",
    [MVarSet, nk_sui_uiSwitchesState, 56, [IGet,"zplugin:Smart UI:Global Settings:Image opacity"]]
	[RoutineCall,UIStateToFile]
,,1]
[ISlider, "zplugin:Smart UI:Global Settings:Text Opacity", [MVarGet,nk_sui_uiSwitchesState,57], 0.1, 0, 1, "",
    [MVarSet, nk_sui_uiSwitchesState, 57, [IGet,"zplugin:Smart UI:Global Settings:Text opacity"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISlider, "zplugin:Smart UI:Global Settings:Icon Size", [MVarGet,nk_sui_uiSwitchesState,58], 1, 40, 64, "",
    [MVarSet, nk_sui_uiSwitchesState, 58, [IGet,"zplugin:Smart UI:Global Settings:Icon Size"]]
	[RoutineCall,UIStateToFile]
,,1]
[ISlider, "zplugin:Smart UI:Global Settings:Button Margin", [MVarGet,nk_sui_uiSwitchesState,59], 2, 2, 8, "",
    [MVarSet, nk_sui_uiSwitchesState, 59, [IGet,"zplugin:Smart UI:Global Settings:Button Margin"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISlider, "zplugin:Smart UI:Global Settings:Button Height", [MVarGet,nk_sui_uiSwitchesState,60], 1, 18, 40, "",
    [MVarSet, nk_sui_uiSwitchesState, 60, [IGet,"zplugin:Smart UI:Global Settings:Button Height"]]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Global Settings:Adjust Button Width", [MVarGet, nk_sui_uiSwitchesState, 61], "Show on Left side of the canvas.",
    [MVarSet,nk_sui_uiSwitchesState,61,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,61,0]
	[RoutineCall,UIStateToFile]
,,1]

[ISwitch, "zplugin:Smart UI:Global Settings:Disable Quick Exit", [MVarGet, nk_sui_uiSwitchesState, 62], "Show on Left side of the canvas.",
    [MVarSet,nk_sui_uiSwitchesState,62,1]
	[RoutineCall,UIStateToFile]
    ,//unpress
    [MVarSet,nk_sui_uiSwitchesState,62,0]
	[RoutineCall,UIStateToFile]
,,1]

[RoutineCall, EnableSwitchStates]
[RoutineCall, developer_mode]


[Sleep, 0.01,
	 //Lbutton Up
	[If,(result & 256 == 256)
		,//cmds	
		// [Note, "startup !"]	

	]
	[If,(result & 512 == 512)
		,//cmds
		// [Note, "shutdown !"]
	]
	[SleepAgain]
, 256 | 512, result, winId]